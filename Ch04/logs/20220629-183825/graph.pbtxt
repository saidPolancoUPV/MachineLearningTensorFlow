node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_7"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_6"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "33333\223Q@333333L@\000\000\000\000\000`U@ffffff5@\315\314\314\314\314\014X@\232\231\231\231\231yX@ffffff7@\000\000\000\000\000\000Y@33333sW@fffff\206P@\232\231\231\231\231\271R@\232\231\231\231\231\031<@\315\314\314\314\314LP@\232\231\231\231\231\031?@\232\231\231\231\231\231V@\000\000\000\000\000\000Y@33333SW@\000\000\000\000\000\300T@333333C@\315\314\314\314\314\354W@\315\314\314\314\314lS@\000\000\000\000\000\000Y@33333\323U@\315\314\314\314\314\014D@\315\314\314\314\314\3141@\232\231\231\231\231\331W@\232\231\231\231\2319X@\000\000\000\000\000@H@\232\231\231\231\231YV@\232\231\231\231\231\271X@33333\363A@\315\314\314\314\314\214Q@fffff\346?@fffff&X@\232\231\231\231\231\031@@\315\314\314\314\314LE@\232\231\231\231\231\031X@\232\231\231\231\231\031K@\000\000\000\000\000\000Y@33333\363S@3333331@\000\000\000\000\000@C@333333T@\232\231\231\231\231YX@\315\314\314\314\314,X@\000\000\000\000\000 S@\315\314\314\314\314\214X@\315\314\314\314\314\254W@\000\000\000\000\000@W@\232\231\231\231\231YU@fffff\346P@33333sJ@\232\231\231\231\231YM@fffff\006X@\000\000\000\000\000\200X@33333\363P@33333sS@ffffffJ@\315\314\314\314\314lT@\232\231\231\231\231\231Q@\000\000\000\000\000\000Y@\315\314\314\314\314\014L@\232\231\231\231\231\271X@fffff\206U@\232\231\231\231\231\231#@333333M@33333SR@\232\231\231\231\231\331M@fffff&E@33333\363V@fffff\346<@\000\000\000\000\000\000Y@\232\231\231\231\231\331V@33333\323U@\315\314\314\314\314LU@fffff&D@\000\000\000\000\000`X@fffff\346?@\000\000\000\000\000\000Y@33333\263;@33333\263X@fffff\246T@33333sC@fffff\246W@333333F@\232\231\231\231\231\0314@33333\223X@ffffff-@fffff\246Q@\315\314\314\314\314\214X@\000\000\000\000\000\300V@\232\231\231\231\231\271U@33333\263X@fffff\246P@\315\314\314\314\314\254S@\232\231\231\231\231\271T@fffffFQ@\315\314\314\314\314\314J@33333\223S@333333K@\232\231\231\231\231\331M@\000\000\000\000\000\000Y@ffffff\032@333333=@fffff\206X@\232\231\231\231\231\331J@fffff\246Q@fffff&W@333333Q@33333\323Q@\315\314\314\314\314LJ@fffff\006U@fffff\206S@\232\231\231\231\231\371Q@\000\000\000\000\000\000Y@\315\314\314\314\314L:@33333\263F@\315\314\314\314\314LB@\232\231\231\231\231\231/@\000\000\000\000\000\300P@\315\314\314\314\314\3149@fffff\206W@333333\007@fffff\306V@fffff\3466@33333SP@ffffff2@\315\314\314\314\314,S@\000\000\000\000\000 V@\000\000\000\000\000\300@@fffff\246@@\315\314\314\314\314\314P@fffff\346<@\000\000\000\000\000@X@\232\231\231\231\231\231Q@\315\314\314\314\314\214D@\000\000\000\000\000\000Y@\232\231\231\231\231\371U@33333\323T@\232\231\231\231\231\371V@\000\000\000\000\000\2003@\232\231\231\231\231yX@\232\231\231\231\231\371V@\000\000\000\000\000\2002@fffff\346;@33333sA@fffff&J@\000\000\000\000\000\240W@fffff\346L@\232\231\231\231\2319W@33333sT@\000\000\000\000\000\000Y@fffff\346N@\232\231\231\231\231YW@33333\263X@\315\314\314\314\314\3145@\232\231\231\231\231\371U@\232\231\231\231\231YM@\315\314\314\314\314\214M@\000\000\000\000\000 S@33333sB@\232\231\231\231\231\271T@\000\000\000\000\000\2001@33333\323W@fffff\346U@\000\000\000\000\000\200?@33333\263;@\315\314\314\314\314\014X@\000\000\000\000\000\000X@\232\231\231\231\231\031@@\232\231\231\231\231yV@\315\314\314\314\314,R@333333V@\315\314\314\314\314\214O@\232\231\231\231\231YL@\315\314\314\314\314\314\030@\315\314\314\314\314\214D@33333SX@33333\263V@\000\000\000\000\000\200@@33333\323V@\232\231\231\231\231yR@\000\000\000\000\000\000Y@\315\314\314\314\314LB@\000\000\000\000\000\000Y@\232\231\231\231\231\031V@\315\314\314\314\314\314S@fffff\346I@\232\231\231\231\231\231G@\315\314\314\314\314lQ@\000\000\000\000\000\200C@\000\000\000\000\000\240U@\315\314\314\314\314\014E@\232\231\231\231\231yX@333333T@\232\231\231\231\231\031U@\232\231\231\231\231YX@\000\000\000\000\000@M@\315\314\314\314\314\314J@ffffffV@\000\000\000\000\000\000Y@\000\000\000\000\000\000Y@fffff&@@33333\363V@fffff&J@\232\231\231\231\231\031?@33333\223U@33333\363H@\315\314\314\314\314lX@33333\363W@\315\314\314\314\314,Q@\232\231\231\231\231\031V@\315\314\314\314\314\314>@\000\000\000\000\000 U@33333\363D@\000\000\000\000\000\000*@\000\000\000\000\000@X@\315\314\314\314\314\214X@ffffffT@\000\000\000\000\000\200O@33333\363I@\232\231\231\231\2319W@\232\231\231\231\231yU@\000\000\000\000\000`Q@\315\314\314\314\314L=@fffff\246H@\315\314\314\314\314LP@\000\000\000\000\000\000Y@\315\314\314\314\314,X@\232\231\231\231\231\231;@fffff&W@\315\314\314\314\314,W@33333\263G@fffff\006Q@fffff\346W@ffffff\032@33333\223R@\232\231\231\231\231\031A@\315\314\314\314\314\3148@333333>@33333SX@\232\231\231\231\231\371U@\000\000\000\000\000\000K@\232\231\231\231\231yW@\315\314\314\314\314\314S@33333s@@\000\000\000\000\000@J@\000\000\000\000\000 S@\232\231\231\231\231\031=@33333SW@ffffffW@\000\000\000\000\000\000Y@ffffffE@33333\263R@\000\000\000\000\000\000X@\000\000\000\000\000@A@\232\231\231\231\231\371U@\000\000\000\000\000\000Y@\315\314\314\314\314\014M@\315\314\314\314\314\3144@ffffff<@\315\314\314\314\314\214@@fffffFV@\000\000\000\000\000@V@ffffff5@\000\000\000\000\000\000Y@\000\000\000\000\000\0001@\232\231\231\231\231\371S@\232\231\231\231\231yX@ffffff5@\232\231\231\231\231\371S@\232\231\231\231\231\331W@33333SV@\000\000\000\000\000\000X@\315\314\314\314\314\314!@\000\000\000\000\000\000Y@\315\314\314\314\314L0@\000\000\000\000\000\000D@\232\231\231\231\231\231J@\232\231\231\231\231\331W@\000\000\000\000\000\000Y@fffff&V@fffffFX@\315\314\314\314\314\314W@\315\314\314\314\314LB@33333SX@\000\000\000\000\000\000H@\000\000\000\000\000\000Y@\000\000\000\000\000\200T@\000\000\000\000\000@O@\232\231\231\231\231\031W@33333\263V@\315\314\314\314\314lS@\232\231\231\231\231\231W@\315\314\314\314\314L?@\000\000\000\000\000\000Y@fffff\3465@\315\314\314\314\314,P@\000\000\000\000\000@S@\000\000\000\000\000\000Y@33333\323W@\000\000\000\000\000\000Y@\232\231\231\231\231\331T@\000\000\000\000\000\300W@\315\314\314\314\314\014Q@33333\263E@\232\231\231\231\231YU@fffff\346B@\000\000\000\000\000\240P@\315\314\314\314\314\314<@fffff\346@@33333\2631@\232\231\231\231\231YR@\232\231\231\231\231\031W@\315\314\314\314\314\214X@\000\000\000\000\000\200I@\315\314\314\314\314LV@\315\314\314\314\314\214H@\315\314\314\314\314,S@\232\231\231\231\231\231.@\232\231\231\231\231\231X@fffff\206W@33333sV@\315\314\314\314\314L6@\232\231\231\231\231\231X@\000\000\000\000\000\000$@\000\000\000\000\000 R@fffff\346J@33333\023T@\000\000\000\000\000\300W@\315\314\314\314\314LX@\232\231\231\231\2319S@fffffFU@\232\231\231\231\231\331A@\315\314\314\314\314,U@\000\000\000\000\000\000Y@\000\000\000\000\000\000Y@\232\231\231\231\231yW@\232\231\231\231\231\031O@\000\000\000\000\000\000S@\315\314\314\314\314\014U@\315\314\314\314\314\014@@fffffFR@\000\000\000\000\000\000Y@fffff\246W@\000\000\000\000\000\000Y@\315\314\314\314\314\314G@\232\231\231\231\231\231G@\232\231\231\231\231\331E@\315\314\314\314\314\3142@fffff&C@\000\000\000\000\000\000V@\000\000\000\000\000\300R@\315\314\314\314\314\014W@\000\000\000\000\000\000Y@fffff\3465@\232\231\231\231\231\331U@\000\000\000\000\000 V@\232\231\231\231\231\271X@\315\314\314\314\314\014B@fffff\246B@\000\000\000\000\000\000Y@\315\314\314\314\314\214P@33333SS@\315\314\314\314\314\314#@ffffffW@33333sW@ffffff/@\000\000\000\000\000\000V@\315\314\314\314\314\314M@\000\000\000\000\000\000V@33333\223W@\000\000\000\000\000\300N@ffffffQ@fffff\006W@fffff&K@\000\000\000\000\000@D@333333D@\000\000\000\000\000\000Y@33333ST@33333\263N@33333\323X@fffff\206X@33333\263W@\315\314\314\314\314L7@\000\000\000\000\000\200F@\315\314\314\314\314\314+@fffff\346F@\000\000\000\000\000\240W@\000\000\000\000\000`R@\232\231\231\231\231\271W@fffff&X@\315\314\314\314\314\214N@\232\231\231\231\231\0315@\000\000\000\000\000\340V@\315\314\314\314\314\314 @\000\000\000\000\000\300T@\000\000\000\000\000\000Y@\315\314\314\314\314\014C@333333X@fffff&K@fffff\346W@\000\000\000\000\000\000Y@\315\314\314\314\314\354T@ffffff2@"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "fffff\316x@fffff\316x@\244p=\n\327\213x@\217\302\365(\\\303x@q=\n\327\243\314w@\\\217\302\365(\034x@fffff\316x@H\341z\024\256\213w@fffff\316x@{\024\256G\341\202x@\205\353Q\270\036\221x@\354Q\270\036\205?x@\000\000\000\000\000xx@fffff\316x@\315\314\314\314\314\304x@=\n\327\243p\301t@\270\036\205\353Q\260v@\000\000\000\000\000\340w@\270\036\205\353Q\234x@\217\302\365(\\{x@\037\205\353Q\270\306x@q=\n\327\243(e@\327\243p=\n\273x@fffff\316x@fffff\316x@\270\036\205\353Q\270\036@R\270\036\205\353\to@\n\327\243p=\032x@R\270\036\205\353Ex@fffff\316x@\024\256G\341z,w@\256G\341z\024Rx@\315\314\314\314\314hx@\270\036\205\353QHx@\205\353Q\270\036\tw@fffff\316x@\\\217\302\365(\340s@fffff\316x@\354Q\270\036\205#w@{\024\256G\341\212x@\217\302\365(\\sw@fffffVx@fffff\316x@\\\217\302\365(\354r@33333\273w@\232\231\231\231\2319H@\366(\\\217\302Yx@fffff\316x@\205\353Q\270\036\005n@33333\263Q@{\024\256G\341jw@\000\000\000\000\000Lw@R\270\036\205\353\241x@=\n\327\243p\221r@{\024\256G\341\346s@fffff\316x@\303\365(\\\217\"u@fffff\316x@\000\000\000\000\000,x@33333\257w@\000\000\000\000\000\354s@\315\314\314\314\314\204x@\232\231\231\231\231\221x@\315\314\314\314\314\334T@{\024\256G\341\316u@fffff\316x@\303\365(\\\217\036x@\217\302\365(\\_x@fffff\316x@\366(\\\217\302\261x@fffff\316x@fffff\316x@\024\256G\341z\300s@H\341z\024\256\303w@\327\243p=\n;x@\037\205\353Q\270\216x@\315\314\314\314\314\200x@\354Q\270\036\205\253x@)\\\217\302\365\304v@fffff\316x@fffff\316x@\\\217\302\365(\250x@fffff\316x@fffffv[@fffff\316x@\244p=\n\327\003w@\217\302\365(\\\003s@{\024\256G\341\232x@fffff\316x@\037\205\353Q\270\252x@fffff\316x@33333[x@\366(\\\217\302ax@\232\231\231\231\231\271x@R\270\036\205\353\3212@fffff\316x@\244p=\n\327\177x@\\\217\302\365(\260x@\315\314\314\314\314\020x@\244p=\n\327\227x@fffff\2468@H\341z\024\256+x@R\270\036\205\353\365w@{\024\256G\341jx@fffff\316x@fffff&x@333333\r@\037\205\353Q\270.u@\366(\\\217\3021x@\341z\024\256G\271x@\315\314\314\314\314dx@\000\000\000\000\000\270x@\037\205\353Q\270.X@fffff\316x@q=\n\327\243\364w@\244p=\n\327gx@fffff\316x@\244p=\n\327\017r@R\270\036\205\353\271x@q=\n\327\243\010x@\327\243p=\n\347w@\270\036\205\353Q\270\032@\303\365(\\\217\026x@fffff\352u@\354Q\270\036\205;w@fffff\316x@fffff\316x@fffff\316x@fffff\316x@fffff\316x@fffff\316x@\217\302\365(\\\263x@\341z\024\256G\305x@fffff\316x@\256G\341z\024\272x@{\024\256G\341\232x@fffff\316x@\366(\\\217\302\365$@)\\\217\302\365\270x@fffff\316x@q=\n\327\243\200w@fffff\316x@\037\205\353Q\270\272x@\303\365(\\\217\266w@fffff\316x@{\024\256G\341bx@fffff\316x@q=\n\327\243\264t@H\341z\024\256_v@=\n\327\243p\241w@\315\314\314\314\314\214x@q=\n\327\243\250x@fffff\316x@\341z\024\256G\241w@fffff\316x@\256G\341z\024\272x@33333+v@\217\302\365(\\\257x@\205\353Q\270\036\325w@33333Gx@\024\256G\341z\230x@\315\314\314\314\314(v@\244p=\n\327\233x@H\341z\024\256\377s@\315\314\314\314\3148r@\232\231\231\231\231Yu@{\024\256G\341\206x@fffff\316x@\366(\\\217\302\201x@fffff\316x@\205\353Q\270\036\235x@{\024\256G\341Vx@\256G\341z\024&s@)\\\217\302\365\300x@fffff\316x@\037\205\353Q\270\222w@R\270\036\205\353\235x@\256G\341z\024\302u@{\024\256G\341fw@fffff\316x@\244p=\n\327\263x@\315\314\314\314\314\230x@fffff\206A@)\\\217\302\365$v@fffff\316x@\270\036\205\353Q\020x@\n\327\243p=\202w@\270\036\205\353Qlx@fffff\316x@fffffRx@\000\000\000\000\000hx@\366(\\\217\302uI@fffffJx@fffff\316x@fffff\316x@fffff\316x@{\024\256G\341\266v@fffff\316x@\256G\341z\024\212x@\256G\341z\024\276u@\327\243p=\n\273x@\n\327\243p=\312<@)\\\217\302\365\034x@=\n\327\243p\021x@\366(\\\217\302\311v@fffff\316x@fffff\316x@fffff\316x@fffff\316x@\256G\341z\024\266w@H\341z\024\256\223x@{\024\256G\341vx@\217\302\365(\\[x@\270\036\205\353Q\300w@H\341z\024\256+w@\024\256G\341z\304x@)\\\217\302\365$w@q=\n\327\243\200x@=\n\327\243p\271x@\354Q\270\036\205\237x@R\270\036\205\353Ix@33333\257x@\217\302\365(\\+x@33333ox@\232\231\231\231\231-x@\244p=\n\327\253x@fffff\316x@\244p=\n\327\233x@\315\314\314\314\314\240x@33333\227x@{\024\256G\341z\324?=\n\327\243p\261x@\366(\\\217\302mx@\232\231\231\231\231\245w@\\\217\302\365(\\N@H\341z\024\256\373w@\256G\341z\024rx@=\n\327\243p%x@\270\036\205\353Q\270x@{\024\256G\341\226x@\315\314\314\314\314Lw@\315\314\314\314\314<Q@fffff\316x@33333Gx@\354Q\270\036\205sl@fffff\316x@R\270\036\205\353\255x@\244p=\n\327Gw@=\n\327\243p\355w@=\n\327\243p};@\217\302\365(\\\303x@\205\353Q\270\036\235e@fffff\316x@\315\314\314\314\314|X@fffff\316x@\232\231\231\231\231]x@\\\217\302\365(\014Y@\315\314\314\314\314\314\004@\366(\\\217\302\225x@\354Q\270\036\205\253x@\270\036\205\353Q\240x@\217\302\365(\\ox@\327\243p=\n\327_@q=\n\327\243\020v@=\n\327\243p\305w@\354Q\270\036\205kf@\\\217\302\365(\230w@\\\217\302\365(\254x@\n\327\243p=\252s@fffff\316x@\341z\024\256GAw@\341z\024\256G\tv@33333\227x@\270\036\205\353Q\020t@\205\353Q\270\036\221w@\n\327\243p=\036v@fffff\316x@\n\327\243p=Vx@\354Q\270\036\205Cx@fffff\316x@fffff\316x@\244p=\n\327\263x@\244p=\n\327\263x@q=\n\327\243\240t@)\\\217\302\365\300x@H\341z\024\256\327u@fffff\316x@\256G\341z\024*x@33333\023m@fffff\316x@33333wx@R\270\036\205\353\2215@\n\327\243p=fx@\327\243p=\n?x@fffff\316x@fffff\316x@{\024\256G\341\276x@fffff\316x@\024\256G\341z\264x@\000\000\000\000\000@;@fffff\316x@33333s0@{\024\256G\341\266x@\270\036\205\353Qlv@fffff\316x@\341z\024\256G\271x@\217\302\365(\\\227t@33333\347u@33333\203v@q=\n\327\243\224x@fffff\316x@{\024\256G\341fx@\232\231\231\231\231\271x@\244p=\n\327\233x@q=\n\327\2434v@\232\231\231\231\231\215x@\024\256G\341z\210x@\217\302\365(\\kw@\244p=\n\327\303x@fffff\316x@\341z\024\256G\241x@\341z\024\256G\245x@\000\000\000\000\000px@fffff\316x@\\\217\302\365(lp@\341z\024\256G9w@\315\314\314\314\314\224x@\327\243p=\nox@\000\000\000\000\000\000\014@\270\036\205\353Q(Y@\217\302\365(\\\037x@\n\327\243p=\202w@\024\256G\341z\214x@fffff\316x@\303\365(\\\217\0026@fffff\316x@fffff\316x@fffff\316x@fffff\316x@fffff\316x@\244p=\n\327Kx@fffff\316x@\256G\341z\024*u@fffff\316x@q=\n\327\243Dr@\244p=\n\327\243\"@fffff\316x@H\341z\024\256\223x@fffff\316x@33333\213w@33333\203x@)\\\217\302\365hw@R\270\036\205\353\225x@R\270\036\205\353\241x@\341z\024\256G\021V@\315\314\314\314\314\354w@\354Q\270\036\205\247x@33333{x@q=\n\327\243\260x@\217\302\365(\\\007x@\n\327\243p=\302x@\270\036\205\353Qxw@\366(\\\217\302\261x@fffff\316x@R\270\036\205\353\225x@\341z\024\256GAx@\244p=\n\327Ov@\256G\341z\024\266x@\024\256G\341ztu@)\\\217\302\365\254x@\205\353Q\270\036\365w@\270\036\205\353Q\210x@=\n\327\243pux@\341z\024\256G}x@\000\000\000\000\000\224x@\000\000\000\000\000tx@fffff\216x@\000\000\000\000\000\274x@\037\205\353Q\270Nw@\244p=\n\327kx@)\\\217\302\365\230w@R\270\036\205\353}w@\205\353Q\270\036\211w@H\341z\024\256\207E@\000\000\000\000\000\244v@H\341z\024\256\363w@\315\314\314\314\314\004x@\217\302\365(\\/x@\037\205\353Q\270\226x@\270\036\205\353Q\274x@\232\231\231\231\231\375u@q=\n\327\243\020n@\341z\024\256G\215x@fffff\316x@\366(\\\217\302-x@fffff\316x@fffff\316x@{\024\256G\341~x@\217\302\365(\\[x@\341z\024\256Guw@fffff\316x@fffff\316x@\232\231\231\231\231Yu@\217\302\365(\\\003q@\366(\\\217\302\371w@"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "\033\323\023\226x@\251?\356_YiR\n\232?\014\032\372\'\270X\315?\300\347\207\021\302\243\255?\350\361{\233\376l\r@R\'\240\211\260\341\342?n4\200\267@\202\242??\313\363\340\356\254\365?\204\206\376\t.V\274?A\016J\230i\373\247?\242\271N#-\325\026@\232\217kC\3058\237?Hm\342\344~\207\302?@\237\310\223\244k\246?\345,\354i\207\277\320?\202sF\224\366\346\'@\372~j\274t\223.@?\000\251M\234\334\340?3\304\261.n\243\241?P6\345\n\357\362\002@|\270\344\270S:\320?Z\365\271\332\212=\001@\214\271k\t\371\240\327?j\207\277&k\324\325?\322\373\306\327\236Y\242?c\177\331=y\270/@\004[%X\034\316\371?\343\252\262\357\212\340\237?\362v\204\323\202\027\341?v\375\202\335\260M @\'1\010\254\034Z\264?\3500_^\200}\310?Q\024\350\023y\222\224?Dio\360\205\331#@jH\334c\351C\247?\206U\274\221y\344\321?\272\325s\322\373&\031@\314\356\311\303B\255\261?,e\031\342X\2674@1\010\254\034Z\304\026@\202\250\373\000\2446\261?\245\210\014\253x#\243?\010=\233U\237\253\343?4\235\235\014\216\222\031@\236\357\247\306Kw$@\344\024\035\311\345\237\'@\273,&6\037W\375?\2343\242\2647\270*@1\010\254\034Zd\007@\325\004Q\367\001H\315?\021p\010Uj\226\022@\201&\302\206\247W\272?Tt$\227\377\220\236?H\277}\0358g\002@X4\235\235\014\216\312?\n\334\272\233\247:\274?0L\246\nF\325#@\264\315\215\351\tK\351?\016\2760\231*\030\351?I\272f\362\3156\325??W[\261\277,&@>\350\331\254\372\\\255?\034\010\311\002&\260\036@\316\302\236v\370\373 @\234\242#\271\374\207\322?\325\347j+\366\227\255?)\350\366\222\306h\342?\300`7l[\224\231?\257Z\231\360K\375\264?T\336\216pZ\360\001@\261KTo\rl\323?0*\251\023\320d8@\336\223\207\205Z\223\r@\322\000\336\002\t\n\360?`\260\033\266-\312\300?\225\232=\320\n\214\006@d\222\221\263\260\'\032@Qf\203L2r\206?\261U\202\305\341\314\366?Uj\366@+0\264?2\311\310Y\330\323\324?l\317,\tPS\303?\350\331\254\372\\m\265?\212\216\344\362\037R&@\261U\202\305\341\314\257?\005\377[\311\216\215\260?\321y\215]\242\032\036@;\215\264T\336\216\310?w\241\271N#-\321?\267\234KqU\331\341?\353V\317I\357\033\257?RD\206U\274\221\343?\305\010\341\321\306\021\273?\321W\220f,\232\266?x\234\242#\271\324B@\303\330B\220\203\022\276?b\234\277\t\205\010\260?\276\331\346\306\364\204\245?\312\246\\\341].\324?\032\335A\354L\241\273?t$\227\377\220~(@;\215\264T\336\356#@\351&1\010\254\034\302?i\000o\201\004\305\303?\217\344\362\037\322\3170@Gw\020;S\350\254?\331\003\255\300\220\225!@\000:\314\227\027`\364?\275:\307\200\354\365\256?2ZGU\023D\275?\262\235\357\247\306K\341?\002Hm\342\344~\267?d#\020\257\353w\035@\205\0108\204*5\263?\3544\322Ry;\345?<\203\206\376\t.\266?\206\261\205 \007%\254?V\202\305\341\314\257\351?\336\375\361^\2652\241?\031\377>\343\302\201\342?\034\360\371a\204\360\260?-}\350\202\372\006#@\000\343\0314\364O\300?\213\340\177+\331\261\016@\307\021k\361)\000\246?\007\346\350\361{\233\316?\270\257\003\347\214(\265?\313\326\372\"\241-\247?W`\310\352V\317\301?\220\332\304\311\375\016\245?\225\361\3573.\034\310?{\240\025\030\262\272\331?q=\n\327\243p\235?\200\267@\202\342\'\'@\361\272~\301n\330\246?[\261\277\354\236<\254?\341\013\223\251\202\221\n@\261U\202\305\341\254\022@\004\342u\375\202\335\260?\274\226\220\017z>V@\323\244\024t{I\273?\315\222\0005\265l\341?\'\240\211\260\341\351\305?{\332\341\257\311\032\265?Xni5$\356\241?\217\307\014T\306\277\325?\371\240g\263\352s\305?\000\005\027+j\260\021@v\310\315p\003>\277?\347\343\332P1\316\267?\016\303G\304\224H\341?6T\214\3637\241\357?\327\206\212q\376&\344?_\2652\341\227\372\305?\204*5{\240\245#@\264\315\215\351\tK\234?aO;\37459\022@-!\037\364lV\275?j\366@+0d\301?*t^c\227\250\340?h\005\206\254n\365\264?\320,\tPS\313\013@\265\333.4\327i\310?\326\335<\325!\027\034@\233U\237\253\255\030(@\2201w-!\037\224?\022\245\275\301\027&\223?gDio\360\2457@\240\211\260\341\351\225\320?\316\245\270\252\354\273\242?\rq\254\213\333H\027@\215\321:\252\232 \320?\367\356\217\367\252\225\356?\367]\021\374o%\253?\365\333\327\201s&*@\212\223\373\035\212\002\311?)\\\217\302\365(\264?\027\267\321\000\336\202\002@\231d\344,\354i\367?\326\342S\000\214g\300?d#\020\257\353\027\332?\375M(D\300!\244?}\320\263Y\365\031,@k\016\020\314\321\343\247?\200\274W\255L\370\037@\212Y/\206r\242\305?\323\366\257\2544)\311?.x\321W\220f\314?\215\264T\336\216p\272?(D\300!T\251\261?R\325\004Q\367\001\270?Q\367\001Hm\002\023@\366]\021\374o%\323?]\376C\372\355\2333@g\270\001\237\037F\250?1%\222\350e4\033@\207\242@\237\310\223\363?\347\000\301\034=~\257?\347\005\330G\247\256\254?F\266\363\375\324\210 @_$\264\345\\\252\026@V\016-\262\235\3172@\261\21272\217\374\301??RD\206U\\\024@?\035\217\031\250\214\257?\005\377[\311\216\215\300?B>\350\331\254\372\254?\360P\024\350\023y\326?\237q\341@H\026\363?\202\250\373\000\2446\271?\035=~o\323\237\265?\226>tA}\213\r@p\231\323e1\261\261?D\377\004\027+j\344?H\371I\265O\007\003@\205|\320\263Y\365\301?9z\374\336\246?\303?\3578EGr\371\317?\215\356 v\246\320\271?MJA\267\2274\246?\334^\322\030\255c\r@\310\200\354\365\356\217\277?\371\203\201\347\336\303\305?D\372\355\353\3009\347?[_$\264\345\334\360?\023\355*\244\374\244\212?\211\265\370\024\000\343y?vq\033\r\340\3351@\232\323e1\261\371\300?\312\253s\014\310^\257?\220\275\336\375\361\336\032@\310$#gaO\303?Z\273\355Bs\235\246?\311v\276\237\032/\341?\004\342u\375\202\255\"@\200\202\213\0255\230\266?]\212\253\312\276+\322?\036\217\031\250\214\177\217?\222W\347\030\220\275\216?+\030\225\324\th\306?\214\333h\000o\201\372?\320\325V\354/[+@\345\355\010\247\005/\306?\313\204_\352\347M\370?<I\272f\362\315\374?\331Z_$\264\345\254?J\357\033_{f\315?\377\t.V\324`\312?\266\370\024\000\343\031\300?HP\374\030s\327,@#\241-\347R|\023@b\204\360h\343\010\003@g\233\033\323\023\226\270?\273\'\017\013\265\306\031@\0054\0216<\3158@\253\347\244\367\215\257\235?3\277\232\003\004S\026@\376e\367\344a\221I@\257\261KTo\r\254?X4\235\235\014\216\202?\201`\216\036\277\267\251?\035\376\232\254Q\017\261?\033\236^)\313\3609@k\324C4\272\343\020@g\270\001\237\037F\334?q\254\213\333h\340,@\241\241\177\202\213\025\323?\017\227\034wJ\007\303?\313\271\024W\225\235\035@\215\013\007B\262\200\251?\025\221a\025od\332??\343\302\201\220\034 @\313\370\367\031\027\016\274?\2201w-!\237\366?,H3\026Mg\313?\225+\274\313E|\365?9b->\005\300\304?c\326\213\241\234h\277?G\376`\340\271W\023@t\315\344\233mn\314?yX\2505\315\0139@\224j\237\216\307\014\330?\027\361\235\230\365b\300?)\221D/\243\230\003@\270\222\035\033\201x\265?\353s\265\025\373\013.@,`\002\267\356\346\251?}\263\315\215\351\t\313?\367\314\222\00055\366?\000o\201\004\305\217\261?[\323\274\343\024\r6@z\245,C\034\253%@\025\000\343\0314\364\343??RD\206U\274\350?\375j\016\020\314\321\243?\001\336\002\t\212\1772@\232%\001jj\331\212?\316N\006G\311K\027@\315\222\0005\265\354\026@\331=yX\250\0252@\217\337\333\364g?\320?\3122\304\261.bR@tA}\313\234\316\024@\314bb\363qm\362?\314bb\363qm\260?\376\324x\351&1\300?\210\205Z\323\274\303D@\275\030\312\211v\025\005@|Ic\264\216\252\334?)\320\'\362$\351\306?T\256\360.\027\361\305?\232\231\231\231\231\231\271?-\262\235\357\247\306\253?sh\221\355|?\275?k\324C4\272\303\025@\342@H\0260\201\253?jH\334c\351C\353?_\014\345D\273\n\305?\315;N\321\221\\\326?T\343\245\233\304 \240?\\\224\331 \223\214\326?\031\347oB!\002\350?M\241\363\032\273D\265?\331\231B\3475v\301?#\303*\336\310<\357?)?\251\366\351x\254?\017bg\n\235\327\300?\261U\202\305\341\314\313?\237v\370k\262f @2U0*\251\323+@\246\325\220\270\307r#@T\313\326\372\"\241\335?N\356w(\n\364\261?\354/\273\'\017\013\225?\302n\330\266(3\016@b\241\3264\357x,@,e\031\342X7&@G\254\305\247\000\310\"@\3745Y\243\036\242\261?\220,`\002\267\356\276?\272f\362\31567\302?\"\370\337Jvl\264?\273~\301n\330\266\300?Ve\337\025\301_\"@\305\224H\242\227Q\363?\320\263Y\365\271Z.@_\007\316\031Q\332\213?Dn\206\033\360\371\261?\266l\255/\022\332\316?\270\222\035\033\201x\215?\t3m\377\312J\243?z1\224\023\355*\022@?\035\217\031\250\214\014@\004s\364\370\275M\267?\326\305m4\200\337F@\241J\315\036h\005\246?\365\326\300V\t\026\313?\264\223\301Q\362\352\326?k`\253\004\213\303\325?r\304Z|\n\200\221?\223\214\234\205=\355\240?\325s\322\373\306\227\023@\224\301Q\362\352\034\303?#gaO;\374\245?0\330\r\333\026e\226?u\002\232\010\033\236\322?\241l\312\025\336\245\002@\354\273\"\370\337J\226?->\005\300x\006\362?3\254\342\215\314#\237?\264Y\365\271\332\252,@\267E\231\r2\311\314?\367\344a\241\3264\267?\336Y\273\355Bs\275?\206\346:\215\264T\306?9\276\366\314\222\000\275?\300\004n\335\315S\215?\316\337\204B\004\034\242?\264Y\365\271\332\252,@\226x@\331\224\013\021@R~R\355\323\361\270?\345\355\010\247\005\177 @\201[w\363T\007\364?\325\347j+\366W%@\255n\365\234\364\276\241?\232\r2\311\310Y\270?\333m\027\232\3534\222?\322tv28J\266?\177M\326\250\207h\352?\372\263\037)\"\303\306?\002\366\321\251+\337\005@_)\313\020\307\232)@5\007\010\346\350\361\233?S\226!\216uq\253?\023\355*\244\374\244\340?[\353\213\204\266\234\327?;\3745Y\243\236\032@\210c]\334F\003\345?J\265O\307c\006\252?v\345\263<\017\256\026@\003\354\243SW>\307?t\322\373\306\327\236\271?\215\234\205=\355\360\367?\303G\304\224H\002\037@c\271\245\325\220\270\267?"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "g\325\347j+v\t@=\233U\237\253\355\026@\031s\327\022\362\301\026@\313\241E\266\363\375\031@\300\354\236<,\324\000@\346\256%\344\203\236\002@\326\305m4\200w\024@33333\263\020@\223\251\202QI\035\007@\314]K\310\007\275\010@e\252`TR\247\n@\315;N\321\221\334\031@P\374\030s\327\022\006@\031\004V\016-r\032@y\351&1\010\254\006@q\033\r\340-\220\364?\024?\306\334\265\204\365?\326V\354/\273\'\007@\024\256G\341z\024\031@\345\362\037\322o_\367?\217\302\365(\\\217\017@N\321\221\\\376C\370?\341\013\223\251\202\321\014@\030\225\324\th\342\022@\031\004V\016-r\032@\313\020\307\272\270\215\376?\243\001\274\005\022\024\016@\202sF\224\366\006 @\256\330_vO\036\001@J{\203/L\246\373?\226\262\014q\254k%@6\315;N\321\321\037@F\266\363\375\324x\024@/\335$\006\201\225\001@t$\227\377\220~\027@\313\020\307\272\270\r\003@\372~j\274t\223\000@\253>W[\261?\030@}\256\266b\177\331\362?Y\027\267\321\000^\014@\353\3426\032\300\333\024@\023\362A\317f\325\031@\314\356\311\303B-\n@\331\316\367S\343\245\001@w\276\237\032/]\001@Nb\020X9\264\374?\336\223\207\205ZS\000@\3019#J{\203\374?\277}\0358gD\002@\017\2343\242\264\267\005@\245N@\023aC\004@1\010\254\034Z$\034@\253>W[\261?\030@\315\314\314\314\314\314\000@\232\010\033\236^)\375?\364\375\324x\351\346\034@\304\261.n\243\001\370?\310\007=\233U\037\005@\271\215\006\360\026\010\021@e\031\342X\0277\r@\347\214(\355\r\276\375?9\326\305m4\300\021@\030\225\324\th\"\372?]\376C\372\355k\000@33333\263\014@o\022\203\300\312\241\006@0\273\'\017\013\265\016@\2505\315;N\021\031@\373\313\356\311\303\002\026@\307K7\211A`\003@\'\240\211\260\341\251\025@(\017\013\265\246y\367?(~\214\271k\t\374?\333\371~j\274\364\020@B>\350\331\254\372\000@\206\311T\301\250d\020@\314]K\310\007=\363?B>\350\331\254:\035@7\032\300[ A\374?\326\305m4\200w\024@\000\000\000\000\000\000\375?B>\350\331\254\372\005@\243\222:\001MD\022@V}\256\266b\377\000@\275R\226!\216\225!@\344\203\236\315\252O\037@{\024\256G\341z\001@\'\240\211\260\341\251\025@\025\035\311\345?$\007@mV}\256\266\342\000@\327\243p=\nW\001@7\211A`\345\320\374?\210\205Z\323\274\343\375?\313\241E\266\363=\026@\221~\373:p\316\375?G\003x\013$\350\030@\300\354\236<,\324\003@O@\023a\303S\r@\326V\354/\273\'\007@b\241\3264\3578\006@g\325\347j+\366\377?\235\200&\302\206\247\377?\340\276\016\2343\342\026@\212\037c\356ZB\037@\2505\315;N\321\366?\221~\373:p\016\024@5^\272I\014\202\000@\274\005\022\024?\306\374?\224\207\205Z\323<\n@E\330\360\364J\331\006@`\345\320\"\333\371\006@\010=\233U\237+\005@\2343\242\2647\370\376?\t\033\236^)\313\010@\216\006\360\026HP\376?\263{\362\260P\353\031@\253>W[\261?\023@\254\034Zd;_\016@\320\263Y\365\271\232\025@\345\362\037\322o_\003@\353\3426\032\300\333\024@d]\334F\003\370\003@\340\276\016\2343\342\026@w\276\237\032/]\002@0*\251\023\320D\035@KY\2068\326E\003@\373\313\356\311\303\002\026@\315\314\314\314\314L\002@0*\251\023\320\304\004@_\007\316\031Q\232\025@\327\022\362A\317f\024@\303\365(\\\217B\014@O@\023a\303S\r@R\270\036\205\353Q\374?_\007\316\031Q\232\025@J\014\002+\207\026\020@0L\246\nF%\365?\367u\340\234\021\245\004@!\260rh\221\355\005@D\213l\347\373\251\366?\316\210\322\336\340+%@\373\\m\305\376\262\372?\343\245\233\304 \260\001@\246\nF%u\302\030@\326\305m4\200w\024@#\333\371~j\034 @\232\010\033\236^)\022@\373:p\316\210R\004@g\325\347j+\366\013@\340-\220\240\370\261\000@\204\rO\257\224\345\000@\032Q\332\033|a\020@\024\256G\341z\324\022@\240\032/\335$F\033@\356|?5^\272\365?\320\263Y\365\271\232\025@\344\203\236\315\252\317\371?\327\243p=\nW\017@\024\320D\330\360\364\020@d;\337O\215\227\020@g\325\347j+\366\013@(\017\013\265\246y\376?u\223\030\004VN\037@<N\321\221\\\376\375?\200H\277}\0358\377?=\233U\237\253-\"@\374\030s\327\022\022!@\005\305\2171w-\366?\"\375\366u\340\234\374?_\007\316\031Q\232\025@\357\311\303B\255i\006@\317f\325\347jk\021@\216\006\360\026H\320\021@7\211A`\345P\013@\273\270\215\006\360\226\006@.\220\240\3701&\025@;\001M\204\rO\016@@\244\337\276\016\034\003@\177\373:p\316\210\377?\313\241E\266\363\375\031@\374\251\361\322Mb\010@[\261\277\354\236\274\010@q=\n\327\243p\370?#\333\371~j<\035@+\366\227\335\223\207\370?\245,C\034\353\342\377?#\333\371~j\034 @\236\357\247\306Kw\021@\356|?5^\272\033@\000o\201\004\305\017\002@\313\020\307\272\270\315\025@?\306\334\265\204|\003@\236\357\247\306K\267\021@\310\230\273\226\220\017\365?\n\327\243p=\n\004@=\n\327\243p\275\005@(~\214\271k\t\376?\253>W[\261?\023@\325\347j+\366\227\t@P\374\030s\327\022\362?\231*\030\225\324\t\000@\006\022\024?\306\334\370?q\033\r\340-\220\017@\374\030s\327\022\362\002@\202sF\224\366\006 @HP\374\030s\327\027@\035\311\345?\244_\013@\030\225\324\th\342\022@^\272I\014\002+\002@\351\267\257\003\347\014\000@\314\177H\277}\235\005@(~\214\271k\211\004@\263{\362\260P\353\031@\360\026HP\374\330\021@\230n\022\203\300\312\r@\365JY\2068\226\035@xz\245,C\034\377?\212\260\341\351\225\262\372?\354Q\270\036\205k\005@n4\200\267@B\033@\254\213\333h\000\357\017@O@\023a\303\323\002@\256\330_vO^\032@\254\034Zd;_\016@t$\227\377\220\376\021@\327\022\362A\317&\034@\\\217\302\365(\\\020@\005\305\2171w-\366?\t\212\037c\356\332\000@\210\364\333\327\201s\023@\202\342\307\230\273\226\002@\030\225\324\th\"\375?\344\203\236\315\252O\037@\254\034Zd;_\r@\222\313\177H\277}\377?.\220\240\3701&\025@\030\225\324\th\342\022@\016\2760\231*X\031@\n\327\243p=\212\027@\3274\3578E\307\016@\027\331\316\367S\343\371?\305\2171w-!\375?\313\020\307\272\270\r\003@\262\235\357\247\306K\001@c\356ZB>h\003@\254\255\330_vO\020@\317f\325\347jk\021@6\315;N\321\321\037@\243\222:\001MD\022@\276\301\027&S\005\000@\032\300[ Aq\002@\277\016\2343\242\264\366?\031\342X\027\267\021\021@|\362\260Pk\232\001@\221\017z6\253>\373?\275R\226!\216\225!@I\235\200&\302\206\002@\317\367S\343\245\233\366?\366(\\\217\302\365\n@B>\350\331\254:\035@U0*\251\023\220\032@\036\026jM\363\016\t@\\\217\302\365(\\\372?(\017\013\265\246y\376?9\326\305m4\000\013@\246\233\304 \260r\367?9\326\305m4\000\013@b\241\3264\3578\006@\365\333\327\201sF\367?n4\200\267@B\033@D\372\355\353\300\271\t@\000\221~\373:p\003@\261Pk\232w\034\003@Z\365\271\332\212\375\373?\365JY\2068\226\035@=,\324\232\346\035\374?\236\357\247\306K\267\021@\340\276\016\2343\342\026@Gr\371\017\3517\t@\374\251\361\322Mb\004@$(~\214\271k\371?R\270\036\205\353Q\r@\330\201sF\224v\003@\232\231\231\231\231\031\002@\337\340\013\223\251\002\022@X\2505\315;\316\000@u\002\232\010\033\036\023@\243\001\274\005\022T\030@\354Q\270\036\205\353\017@g\325\347j+\366\013@$\271\374\207\364\333\375?\351&1\010\254\034\375?\314\356\311\303B-\n@\375\366u\340\234\321\021@0*\251\023\320D\035@\376\324x\351&1\362?\206\311T\301\250d!@\242\2647\370\302d\013@\233\346\035\247\350H\013@\t\212\037c\356Z\375?{\024\256G\341z\027@HP\374\030s\327\374?\271\215\006\360\026\310\005@#J{\203/L\016@\213\375e\367\344\341\n@\352\225\262\014q\354\037@Gr\371\017\351\267\371?\326V\354/\273\'\004@e\031\342X\0277\r@O\257\224e\210c\006@\327\022\362A\317f\024@\326\305m4\200\367\025@\n\327\243p=\212\n@+\030\225\324\t\350\n@HP\374\030s\327\002@HP\374\030s\327\027@\224\366\006_\230\014\020@u\223\030\004VN\037@R\270\036\205\353\321\010@[\323\274\343\024\235\036@\270@\202\342\307\230\375?)\355\r\2760\231\021@H\277}\0358\347\007@q\033\r\340-\220\017@\370S\343\245\233\304\002@\344\203\236\315\252O\037@\020z6\253>\327\005@\361\364JY\2068\r@yX\2505\315;\006@\236^)\313\020\307\001@\276\301\027&S\205\000@\254\034Zd;_\r@\312\303B\255i^\013@\216uq\033\r`\"@F\266\363\375\324\370\006@:#J{\203/\371?Dio\360\205\311\362?\301\250\244N@\023\375?*:\222\313\177\310\004@g\325\347j+\366\013@Zd;\337O\r\002@\344\203\236\315\252\217\020@R\270\036\205\353\321\003@\014\223\251\202QI\371?c\356ZB>h\003@\033\r\340-\220\240\376?\363\037\322o_G\035@8gDiop\014@\'\240\211\260\341\251\025@p\316\210\322\336\340\030@#\333\371~j<\035@0L\246\nF%\004@y\351&1\010,\007@\355\236<,\324\232\005@\234\242#\271\374\207\372?\316\210\322\336\340+%@\017\2343\242\264\267\005@\242\2647\370\302\344\006@\246\233\304 \260\362\000@T\343\245\233\304@(@\253>W[\261?\023@R\270\036\205\353Q\365?\327\022\362A\317\346\034@\354Q\270\036\205\353\014@p\316\210\322\336\340\030@\'\302\206\247W\312\371?\267b\177\331=y\370?\024\256G\341z\024\031@\245N@\023a\303\371?\366(\\\217\302u\026@\200H\277}\0358\377?\302\027&S\005c\031@\327\243p=\nW\017@g\325\347j+\366\013@\243\222:\001M\004\017@\016\2760\231*X\031@J{\203/L\246 @\326\305m4\200\367\025@;\337O\215\227n\371?\030&S\005\243\022\004@gDio\360\005\013@\2201w-!\237\003@\303\323+e\031b\016@\221~\373:p\316\377?U0*\251\023\220\032@\337\340\013\223\251\002\022@[\323\274\343\024\235\036@\351&1\010\254\\\020@\376e\367\344a\241\000@\373\\m\305\3762\003@~\0358gDi\370?\370\302d\252`T\376?\256\330_vO\336\023@n4\200\267@B\033@\002+\207\026\331N\002@\000\221~\373:\320!@\216uq\033\r\340\005@\240\211\260\341\351\025\000@\023\362A\317f\325\031@0\273\'\017\013\265\365?\232\010\033\236^)\022@-\262\235\357\247\306\006@\201\004\305\2171w\371?\026\373\313\356\311C\006@\326\305m4\200\367\025@"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "q=\n\327\243p\001@=\n\327\243p=\016@\244p=\n\327\243\033@H\341z\024\256G\030@\232\231\231\231\231\0312@\244p=\n\327\3435@\315\314\314\314\314\314\023@H\341z\024\256G @H\341z\024\256\307+@H\341z\024\256G\013@\232\231\231\231\231\0312@=\n\327\243p=\016@\205\353Q\270\036\005$@\366(\\\217\302\365\n@\315\314\314\314\314\314#@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\315\314\314\314\314\314\030@=\n\327\243p=\000@\024\256G\341z\2243@\315\314\314\314\314\314#@\024\256G\341z\2243@\315\314\314\314\314\314#@\205\353Q\270\036\205\035@\366(\\\217\302\365\n@\232\231\231\231\231\0312@H\341z\024\256G @\217\302\365(\\\217\021@\303\365(\\\217\302\017@\232\231\231\231\231\0312@\n\327\243p=\n\373?q=\n\327\243p\027@q=\n\327\243p\005@\232\231\231\231\231\0312@\354Q\270\036\205\353\t@\341z\024\256Ga#@\232\231\231\231\231\0312@q=\n\327\243p\001@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\354Q\270\036\205\353\t@\303\365(\\\217\302\024@\315\314\314\314\314\314\030@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\024\256G\341z\2243@\232\231\231\231\231\0312@\024\256G\341z\2243@\037\205\353Q\270\036!@\232\231\231\231\231\0312@\270\036\205\353Q\270\023@q=\n\327\243p\001@\024\256G\341z\2243@=\n\327\243p\275;@\205\353Q\270\036\205\024@\232\231\231\231\231\0312@\315\314\314\314\314\314#@H\341z\024\256G @\315\314\314\314\314\314\030@\232\231\231\231\231\0312@\366(\\\217\302\365\021@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\256G\341z\024.%@\256G\341z\024\256\003@\315\314\314\314\314\314\030@=\n\327\243p=\376?\327\243p=\n\327+@\024\256G\341z\2243@\205\353Q\270\036\205\035@\232\231\231\231\231\0312@\232\231\231\231\231\0312@H\341z\024\256G @\037\205\353Q\270\036!@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\000\000\000\000\000\000\002@\024\256G\341z\2243@\315\314\314\314\314\314\023@\244p=\n\327\3435@\205\353Q\270\036\005$@\205\353Q\270\036\205\013@\232\231\231\231\231\0312@\000\000\000\000\000\000\364?\354Q\270\036\205\353\001@\232\231\231\231\231\0312@\205\353Q\270\036\205\035@\341z\024\256Ga#@\244p=\n\327\3435@\\\217\302\365(\334\'@\303\365(\\\217\302\017@=\n\327\243p\275;@{\024\256G\341z\037@\232\231\231\231\231\0312@{\024\256G\341z\037@\\\217\302\365(\334\'@\024\256G\341z\024.@\315\314\314\314\314\314\030@\037\205\353Q\270\036!@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\244p=\n\327\243\033@\205\353Q\270\036\205\024@\232\231\231\231\231\0312@)\\\217\302\365\250)@\232\231\231\231\231\0312@\024\256G\341z\2243@\256G\341z\024\256\003@\037\205\353Q\270\036!@\303\365(\\\217\302\017@333333\020@\232\231\231\231\231\0312@q=\n\327\243p\001@\303\365(\\\217\302\017@\205\353Q\270\036\205\013@\303\365(\\\217\302\024@H\341z\024\256G @\232\231\231\231\231\231\007@\303\365(\\\217\302\017@\354Q\270\036\205\353\t@\232\231\231\231\231\0312@\244p=\n\327\243\033@\232\231\231\231\231\0312@H\341z\024\256G\025@\341z\024\256Ga#@\327\243p=\n\327+@\\\217\302\365(\334\'@333333\020@q=\n\327\243p\023@\244p=\n\327\243\033@\315\314\314\314\314\314#@\024\256G\341z\024.@\232\231\231\231\231\0312@q=\n\327\243p\023@q=\n\327\243p\001@\024\256G\341z\2243@\232\231\231\231\231\0312@\256G\341z\024\256\003@\232\231\231\231\231\0312@\217\302\365(\\\217\376?\244p=\n\327\3435@\037\205\353Q\270\036!@\270\036\205\353Q\270\023@\315\314\314\314\314\314\023@q=\n\327\243p\027@\205\353Q\270\036\205\035@\232\231\231\231\231\0312@\037\205\353Q\270\036\007@fffff\2469@\303\365(\\\217\302\017@H\341z\024\256G @H\341z\024\256G @\205\353Q\270\036\205\024@\232\231\231\231\231\0312@\232\231\231\231\231\231\007@\232\231\231\231\231\0312@\327\243p=\n\327\033@\256G\341z\024.%@\315\314\314\314\314\314\030@\037\205\353Q\270\036\007@\232\231\231\231\231\0312@q=\n\327\243p\027@\232\231\231\231\231\0312@\232\231\231\231\231\0312@)\\\217\302\365(\374?\232\231\231\231\231\231\020@\232\231\231\231\231\0312@\244p=\n\327\3435@q=\n\327\243p\023@\232\231\231\231\231\0312@\256G\341z\024.%@H\341z\024\256G @H\341z\024\256G\013@\232\231\231\231\231\0312@\037\205\353Q\270\236%@\205\353Q\270\036\205\013@\024\256G\341z\2243@\024\256G\341z\2243@H\341z\024\256G\030@\315\314\314\314\314\314\030@H\341z\024\256G\013@\232\231\231\231\231\0312@R\270\036\205\353Q\370?\232\231\231\231\231\0312@fffff\2469@q=\n\327\243p\027@\327\243p=\n\327\033@\205\353Q\270\036\205\024@fffff\2469@{\024\256G\341z\037@\232\231\231\231\231\0312@\327\243p=\n\327\033@\232\231\231\231\231\0312@\\\217\302\365(\334\'@\232\231\231\231\231\0312@\024\256G\341z\2243@\303\365(\\\217\302\024@\256G\341z\024\256\003@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\256G\341z\024.%@\232\231\231\231\231\0312@\217\302\365(\\\217\021@\327\243p=\n\327+@H\341z\024\256G\013@\205\353Q\270\036\205\035@\244p=\n\327\3435@fffff\2469@333333\020@\232\231\231\231\231\0312@\205\353Q\270\036\205\013@H\341z\024\256G @\232\231\231\231\231\0312@q=\n\327\243p\027@fffff\2469@\244p=\n\327\3435@\205\353Q\270\036\005$@\217\302\365(\\\217\026@\232\231\231\231\231\0312@\205\353Q\270\036\005$@{\024\256G\341z\037@H\341z\024\256G @H\341z\024\256G @R\270\036\205\353Q\370?{\024\256G\341z\002@\232\231\231\231\231\0312@\037\205\353Q\270\036!@\244p=\n\327\243\031@\232\231\231\231\231\0312@=\n\327\243p\275;@\354Q\270\036\205\353\001@\315\314\314\314\314\314\030@\232\231\231\231\231\0312@\037\205\353Q\270\236%@\205\353Q\270\036\205\035@\000\000\000\000\000\000\016@\\\217\302\365(\\\363?\327\243p=\n\327\027@\024\256G\341z\2243@\232\231\231\231\231\0312@\341z\024\256Ga#@\024\256G\341z\2243@\024\256G\341z\2243@\244p=\n\327\243\031@\256G\341z\024.%@q=\n\327\243p\027@\205\353Q\270\036\205\013@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\024\256G\341z\2243@\244p=\n\327\243\031@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\000\000\000\000\000\000\364?\232\231\231\231\231\0312@\232\231\231\231\231\0312@q=\n\327\243p\001@\303\365(\\\217\302\007@=\n\327\243p=\030@333333\020@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\315\314\314\314\314\314\030@\232\231\231\231\231\0312@\315\314\314\314\314\314\030@\037\205\353Q\270\036!@\232\231\231\231\231\0312@\217\302\365(\\\217\026@\315\314\314\314\314\314\030@\232\231\231\231\231\0312@\\\217\302\365(\334\'@\024\256G\341z\2243@q=\n\327\243p\027@\024\256G\341z\2243@\327\243p=\n\327\033@\244p=\n\327\243\033@\232\231\231\231\231\0312@\205\353Q\270\036\005$@\232\231\231\231\231\0312@\256G\341z\024.%@\037\205\353Q\270\036!@\024\256G\341z\2243@)\\\217\302\365\250)@\232\231\231\231\231\0312@\366(\\\217\302\365\021@{\024\256G\341z\037@H\341z\024\256G @\037\205\353Q\270\036\007@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\315\314\314\314\314\314\030@H\341z\024\256G @H\341z\024\256G\025@\232\231\231\231\231\0312@\205\353Q\270\036\205\363?\232\231\231\231\231\0312@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\244p=\n\327\243\033@\232\231\231\231\231\0312@\232\231\231\231\231\0312@H\341z\024\256G @\327\243p=\n\327\027@\205\353Q\270\036\205\024@\232\231\231\231\231\0312@\315\314\314\314\314\314#@\315\314\314\314\314\314\030@\341z\024\256Ga#@\244p=\n\327\243\033@\\\217\302\365(\\\030@333333\020@H\341z\024\256\307+@\232\231\231\231\231\0312@\327\243p=\n\327+@H\341z\024\256G @q=\n\327\243p\027@\315\314\314\314\314\314#@\205\353Q\270\036\205\367?\244p=\n\327\3435@H\341z\024\256G @\256G\341z\024\256\003@\256G\341z\024.%@\244p=\n\327\3435@\354Q\270\036\205\353\001@\205\353Q\270\036\005$@\256G\341z\024.%@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\315\314\314\314\314\314\030@H\341z\024\256\307+@\256G\341z\024\256\347?\232\231\231\231\231\0312@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\256G\341z\024\256\003@\037\205\353Q\270\036\007@\205\353Q\270\036\005$@\244p=\n\327\243\031@\205\353Q\270\036\005$@\232\231\231\231\231\0312@\024\256G\341z\2243@\232\231\231\231\231\0312@\000\000\000\000\000\000\020@333333\020@\205\353Q\270\036\205\035@q=\n\327\243p\007@R\270\036\205\353Q\370?\232\231\231\231\231\0312@\232\231\231\231\231\0312@\256G\341z\024\256\003@\232\231\231\231\231\0312@\217\302\365(\\\217\376?\037\205\353Q\270\036!@\315\314\314\314\314\314\030@\244p=\n\327\3435@)\\\217\302\365(\000@\303\365(\\\217\302\024@\232\231\231\231\231\0312@\205\353Q\270\036\205\024@\024\256G\341z\024.@q=\n\327\243p\007@\244p=\n\327\3435@\024\256G\341z\2243@=\n\327\243p=\000@\024\256G\341z\2243@\303\365(\\\217\302\024@\232\231\231\231\231\0312@{\024\256G\341z\037@\327\243p=\n\327\033@\037\205\353Q\270\036\007@\256G\341z\024.%@\270\036\205\353Q\270\023@\037\205\353Q\270\036\365?\\\217\302\365(\\\030@\232\231\231\231\231\0312@\232\231\231\231\231\0312@\327\243p=\n\327\027@\232\231\231\231\231\0312@H\341z\024\256G @\232\231\231\231\231\0312@=\n\327\243p=\030@)\\\217\302\365\250)@\205\353Q\270\036\205\367?)\\\217\302\365\250)@\303\365(\\\217\302\017@\341z\024\256Ga#@\024\256G\341z\2243@\232\231\231\231\231\0312@H\341z\024\256G\034@\217\302\365(\\\217\026@\303\365(\\\217\302\017@q=\n\327\243p\027@\232\231\231\231\231\0312@\303\365(\\\217\302\017@\303\365(\\\217\302\024@\232\231\231\231\231\0312@\205\353Q\270\036\205\035@\256G\341z\024\256\003@\024\256G\341z\2243@\232\231\231\231\231\0312@\\\217\302\365(\\\030@"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "\037\205\353Q\270\036\036@\270\036\205\353Q\270\034@\315\314\314\314\314\3142@333333 @\341z\024\256Ga$@=\n\327\243p=&@\315\314\314\314\314\314\022@\024\256G\341z\024*@\354Q\270\036\205\3531@\037\205\353Q\270\236!@\366(\\\217\302\365\036@q=\n\327\243p\022@\270\036\205\353Q8+@{\024\256G\341z$@q=\n\327\243p\'@\303\365(\\\217B(@=\n\327\243p=7@\205\353Q\270\036\205\022@\270\036\205\353Q\270\035@H\341z\024\256\207=@\000\000\000\000\000\000\'@fffff\2460@\217\302\365(\\\217\"@{\024\256G\341z\030@\256G\341z\024\256\022@\244p=\n\327c8@\327\243p=\nW4@\217\302\365(\\\017%@\n\327\243p=\n\035@\232\231\231\231\231\3314@\366(\\\217\302\365\025@\366(\\\217\302u2@\n\327\243p=\n\007@q=\n\327\243p0@\256G\341z\024.\"@\256G\341z\024.+@\n\327\243p=\3121@R\270\036\205\353Q\025@\327\243p=\nW7@\366(\\\217\302\365-@\\\217\302\365(\\\035@\000\000\000\000\000\000\033@ffffff\036@\232\231\231\231\231\0318@H\341z\024\256\0072@=\n\327\243p\2756@\270\036\205\353Q\270\376?\232\231\231\231\231Y0@\037\205\353Q\270\236#@\303\365(\\\217B%@R\270\036\205\353Q\'@q=\n\327\243p&@\327\243p=\n\327\024@333333&@\256G\341z\024\256=@\354Q\270\036\205\353\032@\270\036\205\353Q\370=@\354Q\270\036\205\353\027@\327\243p=\nW-@\232\231\231\231\231\231\017@\n\327\243p=\n.@\037\205\353Q\270\036\032@\354Q\270\036\205\3533@\244p=\n\327\2431@\315\314\314\314\314\214=@)\\\217\302\365(\024@\303\365(\\\217\302\003@\315\314\314\314\314L!@\315\314\314\314\314\314$@H\341z\024\256G\'@\232\231\231\231\231\231\030@H\341z\024\256G<@\000\000\000\000\000\000,@\366(\\\217\302\365\'@\256G\341z\024.,@\327\243p=\n\327$@\256G\341z\024\256\007@\366(\\\217\302u @\217\302\365(\\\217\035@{\024\256G\341z\014@H\341z\024\256\307.@\232\231\231\231\231\231$@\217\302\365(\\\217\025@\205\353Q\270\036E7@\354Q\270\036\205\353\027@\341z\024\256G\341\023@\217\302\365(\\O3@R\270\036\205\353Q\024@333333,@\366(\\\217\302\3650@\217\302\365(\\\217\026@{\024\256G\341z\024@R\270\036\205\353\0212@\\\217\302\365(\334(@\n\327\243p=\n-@\n\327\243p=\212*@\327\243p=\nW#@R\270\036\205\353Q @\217\302\365(\\\217\020@\000\000\000\000\000\000*@\341z\024\256Ga/@\232\231\231\231\231\3312@=\n\327\243p=\027@q=\n\327\243p\033@\217\302\365(\\\317>@\256G\341z\024\256(@)\\\217\302\365(1@\000\000\000\000\000\000\026@\315\314\314\314\314L*@\256G\341z\024\256\036@H\341z\024\256G\t@\024\256G\341z\024\"@\205\353Q\270\036\2055@\341z\024\256G\341\031@)\\\217\302\365(\037@\366(\\\217\302\365\006@{\024\256G\341z#@\341z\024\256Ga\'@\256G\341z\024\256\377?\303\365(\\\217\302\035@q=\n\327\243\360#@\366(\\\217\302\2652@\\\217\302\365(\\\023@\341z\024\256Ga,@\205\353Q\270\036\005#@\327\243p=\n\327)@)\\\217\302\365(!@)\\\217\302\365(\"@\341z\024\256Ga-@)\\\217\302\365(\025@\315\314\314\314\314L,@\270\036\205\353Q\270$@\327\243p=\n\327\030@\256G\341z\024\2569@\341z\024\256G\341\034@\270\036\205\353Q\270\033@R\270\036\205\353\321:@\303\365(\\\217\0023@=\n\327\243p=\036@\366(\\\217\30251@H\341z\024\256G\026@\366(\\\217\302u2@)\\\217\302\365\2502@q=\n\327\243p\031@\244p=\n\327\243\n@R\270\036\205\353Q\"@\315\314\314\314\314\314\034@R\270\036\205\353Q5@\232\231\231\231\231\231\032@\256G\341z\024\3561@\256G\341z\024.#@\341z\024\256G\3413@\205\353Q\270\036\205 @\341z\024\256G\341,@=\n\327\243p=5@H\341z\024\256G\021@{\024\256G\341z\034@\354Q\270\036\205\353\036@R\270\036\205\353Q-@\024\256G\341z\024#@\217\302\365(\\\217\014@)\\\217\302\365(\025@=\n\327\243p=\032@ffffff/@333333,@\\\217\302\365(\334)@q=\n\327\243p\031@q=\n\327\243\2607@q=\n\327\24301@\341z\024\256G\341\032@\024\256G\341z\224$@\217\302\365(\\\0172@H\341z\024\256G1@\315\314\314\314\314\314\026@\205\353Q\270\036\205-@)\\\217\302\365(\036@\270\036\205\353Q\270\032@\217\302\365(\\\017(@\256G\341z\024\256\373?\024\256G\341z\224!@\366(\\\217\302u5@ffffff @\270\036\205\353Q85@\270\036\205\353Q8!@\217\302\365(\\\2178@\037\205\353Q\270\236-@\315\314\314\314\314L$@R\270\036\205\353Q\032@q=\n\327\243p\"@=\n\327\243p\275,@\354Q\270\036\205k/@\341z\024\256G!2@\000\000\000\000\000\000*@\341z\024\256G\341*@\205\353Q\270\036\205\037@ffffff-@\\\217\302\365(\\\022@\024\256G\341z\224\"@\315\314\314\314\314\314\021@\303\365(\\\217\302!@\327\243p=\n\2270@\217\302\365(\\/A@\303\365(\\\217\302\"@\205\353Q\270\036E1@\327\243p=\nW)@\024\256G\341z\024\031@\000\000\000\000\000\000\026@\315\314\314\314\314\314\036@\205\353Q\270\036\205(@\024\256G\341z\2241@H\341z\024\256G#@\315\314\314\314\314L-@\303\365(\\\217\302\022@\205\353Q\270\036\205$@\256G\341z\024\256*@\232\231\231\231\231\231\027@)\\\217\302\365h9@R\270\036\205\353Q5@R\270\036\205\353Q$@\\\217\302\365(\334\"@)\\\217\302\365(%@\366(\\\217\30250@\232\231\231\231\231\0311@\217\302\365(\\\217&@R\270\036\205\353Q\032@\366(\\\217\302\365\025@\354Q\270\036\205\353\023@H\341z\024\256\3075@\270\036\205\353Qx0@\244p=\n\327\243\020@q=\n\327\243p1@\217\302\365(\\\0172@H\341z\024\256G\030@\315\314\314\314\314L\'@\024\256G\341z\0248@\341z\024\256G\341\032@{\024\256G\341z\'@\341z\024\256G\341\010@H\341z\024\256G\t@\303\365(\\\217B$@333333,@\303\365(\\\217\002A@\205\353Q\270\036\005(@\217\302\365(\\\217\n@H\341z\024\256G(@=\n\327\243p=\014@q=\n\327\243\360%@\000\000\000\000\000\000)@=\n\327\243p=\022@\315\314\314\314\314\0142@\256G\341z\024\2562@\315\314\314\314\314\314;@\327\243p=\n\327\007@\217\302\365(\\\017(@\205\353Q\270\036\3053@\217\302\365(\\\217\027@\270\036\205\353Q80@\270\036\205\353Q8$@\\\217\302\365(\334!@ffffff\037@\\\217\302\365(\334(@R\270\036\205\353Q\025@\244p=\n\327\243:@H\341z\024\256G-@\024\256G\341z\024\016@H\341z\024\256\3073@\\\217\302\365(\\\017@\327\243p=\n\327\"@ffffff:@\\\217\302\365(\334 @q=\n\327\243p\031@\244p=\n\327#2@\354Q\270\036\205\353\031@=\n\327\243p=.@\270\036\205\353Q\270\014@\270\036\205\353Q\270\031@\\\217\302\365(\\\032@\232\231\231\231\231\031#@fffff\346&@\327\243p=\n\0271@\205\353Q\270\036\305:@{\024\256G\341\3727@\n\327\243p=\212(@\244p=\n\327\243&@333333\"@)\\\217\302\365\3508@=\n\327\243p=#@\256G\341z\024\356=@\366(\\\217\302\265;@\303\365(\\\217\302\030@\\\217\302\365(\0346@\n\327\243p=\3129@\\\217\302\365(\334#@\232\231\231\231\231\231)@\217\302\365(\\\217\034@\\\217\302\365(\374B@=\n\327\243p=\023@{\024\256G\341z%@\n\327\243p=\n\034@\315\314\314\314\314\014=@\217\302\365(\\\317>@\037\205\353Q\270\2364@\366(\\\217\302\365&@\232\231\231\231\231Y2@\\\217\302\365(\\#@\000\000\000\000\000\000#@\341z\024\256Ga;@H\341z\024\256G)@\232\231\231\231\231\031 @\232\231\231\231\231\2311@\354Q\270\036\205k$@q=\n\327\243p\023@)\\\217\302\365(\031@\000\000\000\000\000\000%@{\024\256G\341\2721@\217\302\365(\\\217\035@)\\\217\302\365\250+@\n\327\243p=\n#@q=\n\327\243\360#@=\n\327\243p=\022@\256G\341z\024.-@\315\314\314\314\314L0@\366(\\\217\302\365+@=\n\327\243p\275%@\217\302\365(\\O1@\366(\\\217\302\365\022@\024\256G\341z\024(@H\341z\024\256\0070@q=\n\327\243\3600@\327\243p=\nW.@\205\353Q\270\036\2053@\000\000\000\000\000\000\025@\341z\024\256Ga#@\024\256G\341z\024\027@fffff&1@R\270\036\205\353Q4@\303\365(\\\217bA@\341z\024\256G\3416@fffff\346\"@\327\243p=\n\327\020@fffff\346$@\303\365(\\\217\302\034@=\n\327\243p\275.@\232\231\231\231\231\2317@\\\217\302\365(\334,@33333s:@\232\231\231\231\231\231-@\270\036\205\353Q8$@\024\256G\341z\224)@\205\353Q\270\036\205\021@{\024\256G\341z\032@)\\\217\302\365(\037@\270\036\205\353Q\270,@H\341z\024\256G\023@=\n\327\243p}B@\232\231\231\231\231\031 @\341z\024\256G\341*@\354Q\270\036\205k#@333333)@\000\000\000\000\000\000\022@\205\353Q\270\036\005!@\024\256G\341z\024\n@\315\314\314\314\314L*@\256G\341z\024.%@\037\205\353Q\270\036\024@)\\\217\302\365(8@R\270\036\205\353Q<@\341z\024\256G\341\010@=\n\327\243p=(@\037\205\353Q\270\036%@\270\036\205\353Q8*@33333s4@\315\314\314\314\314L+@\256G\341z\024\256&@\205\353Q\270\036E1@\303\365(\\\217\302&@\232\231\231\231\231\231\017@\000\000\000\000\000\000#@\037\205\353Q\270\236>@\327\243p=\nW)@R\270\036\205\353\321&@=\n\327\243p\2750@\205\353Q\270\036\0055@{\024\256G\341\3727@R\270\036\205\353Q\037@\341z\024\256G\341!@\315\314\314\314\314\314\021@\n\327\243p=\212$@\000\000\000\000\000\200&@333333.@33333s5@\n\327\243p=\3127@\037\205\353Q\270\036\020@\037\205\353Q\270\036\025@\244p=\n\327\243\027@R\270\036\205\353Q\014@{\024\256G\341\372+@\232\231\231\231\231\231\033@\270\036\205\353Q\270\026@\327\243p=\n\327\r@{\024\256G\341z\033@\270\036\205\353Q\270\026@\217\302\365(\\\217*@{\024\256G\341:0@\327\243p=\nW!@"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "h\221\355|?5\336?`\345\320\"\333\371\336?y\351&1\010\254\334?\223\030\004V\016-\332?\244p=\n\327\243\350?+\207\026\331\316\367\343?\347\373\251\361\322M\332?\236\357\247\306K7\341?\232\231\231\231\231\231\341?\262\235\357\247\306K\337?\240\032/\335$\006\341?`\345\320\"\333\371\336?\033/\335$\006\201\341?F\266\363\375\324x\331?\234\304 \260rh\341?J\014\002+\207\026\345?F\266\363\375\324x\345?T\343\245\233\304 \340?\217\302\365(\\\217\332?\254\034Zd;\337\353?\234\304 \260rh\341?\254\034Zd;\337\353?\234\304 \260rh\341?Zd;\337O\215\337?F\266\363\375\324x\331?\356|?5^\272\345?\236\357\247\306K7\341?}?5^\272I\334?Nb\020X9\264\344?ffffff\346?\347\373\251\361\322M\332?/\335$\006\201\225\333?\376e\367\344a\241\332?\256G\341z\024\256\347?q=\n\327\243p\335?\270\036\205\353Q\270\342?\256G\341z\024\256\347?\035Zd;\337O\335?J\014\002+\207\026\345?\016-\262\235\357\247\342?q=\n\327\243p\335?{\024\256G\341z\340?\323Mb\020X9\340?\343\245\233\304 \260\342?\331\316\367S\343\245\343?`\345\320\"\333\371\346?\\\217\302\365(\\\343?\223\030\004V\016-\346?\\\217\302\365(\\\343?\244p=\n\327\243\340?\331\316\367S\343\245\343?1\010\254\034Zd\333?\035Zd;\337O\335?\\\217\302\365(\\\343?\260rh\221\355|\343?\313\241E\266\363\375\334?\223\030\004V\016-\346?\234\304 \260rh\341?\236\357\247\306K7\341?\323Mb\020X9\340?`\345\320\"\333\371\346?#\333\371~j\274\334?\223\030\004V\016-\346?\343\245\233\304 \260\342?\262\235\357\247\306K\337?\010\254\034Zd;\337?\323Mb\020X9\340?\372~j\274t\223\340?+\207\026\331\316\367\333?\\\217\302\365(\\\343?Zd;\337O\215\337?ffffff\346?`\345\320\"\333\371\346?\236\357\247\306K7\341?\244p=\n\327\243\340?\240\032/\335$\006\341?\376\324x\351&1\344?L7\211A`\345\330?\254\034Zd;\337\353?\347\373\251\361\322M\332?+\207\026\331\316\367\343?\033/\335$\006\201\341?+\207\026\331\316\367\333?\256G\341z\024\256\347?\333\371~j\274t\333?\232\231\231\231\231\231\331?7\211A`\345\320\346?Zd;\337O\215\337?\270\036\205\353Q\270\342?+\207\026\331\316\367\343?\274t\223\030\004V\342?Nb\020X9\264\344?\260rh\221\355|\343?\370S\343\245\233\304\340?\356|?5^\272\345?\370S\343\245\233\304\340?\274t\223\030\004V\342?\031\004V\016-\262\335?T\343\245\233\304 \340?\244p=\n\327\243\340?\343\245\233\304 \260\342?\256G\341z\024\256\347?y\351&1\010\254\334?\313\241E\266\363\375\334?ffffff\346?+\207\026\331\316\367\333?\343\245\233\304 \260\342?\\\217\302\365(\\\343?\010\254\034Zd;\337?\244p=\n\327\243\340?ffffff\342?R\270\036\205\353Q\340?\356|?5^\272\345?h\221\355|?5\336?Nb\020X9\264\344?+\207\026\331\316\367\333?{\024\256G\341z\340?\236\357\247\306K7\341?1\010\254\034Zd\333?ffffff\342?q=\n\327\243p\335?7\211A`\345\320\346?y\351&1\010\254\334?\244p=\n\327\243\350?\354Q\270\036\205\353\331?\270\036\205\353Q\270\342?+\207\026\331\316\367\333?\274t\223\030\004V\342?R\270\036\205\353Q\340?\335$\006\201\225C\333?y\351&1\010\254\334?\234\304 \260rh\341?\031\004V\016-\262\335?ffffff\346?\335$\006\201\225C\333?h\221\355|?5\336?\254\034Zd;\337\353?7\211A`\345\320\346?\010\254\034Zd;\337?F\266\363\375\324x\345?;\337O\215\227n\332?+\207\026\331\316\367\343?\244p=\n\327\243\340?1\010\254\034Zd\333?\347\373\251\361\322M\332?/\335$\006\201\225\333?Zd;\337O\215\337?\343\245\233\304 \260\342?{\024\256G\341z\334?d;\337O\215\227\342?Nb\020X9\264\344?\236\357\247\306K7\341?\236\357\247\306K7\341?\313\241E\266\363\375\334?F\266\363\375\324x\345?1\010\254\034Zd\333?`\345\320\"\333\371\346?\031\004V\016-\262\335?\262\235\357\247\306K\337?\323Mb\020X9\340?{\024\256G\341z\334?`\345\320\"\333\371\346?/\335$\006\201\225\333?`\345\320\"\333\371\346?\331\316\367S\343\245\343?\244p=\n\327\243\330?\333\371~j\274t\333?F\266\363\375\324x\345?+\207\026\331\316\367\343?\335$\006\201\225C\333?7\211A`\345\320\346?\262\235\357\247\306K\337?\236\357\247\306K7\341?\262\235\357\247\306K\337?\217\302\365(\\\217\342?;\337O\215\227n\332?+\207\026\331\316\367\333?\\\217\302\365(\\\343?\\\217\302\365(\\\343?\223\030\004V\016-\332?\323Mb\020X9\340?\262\235\357\247\306K\337?\264\310v\276\237\032\343?B`\345\320\"\333\331?ffffff\346?d;\337O\215\227\342?/\335$\006\201\225\333?\031\004V\016-\262\335?\313\241E\266\363\375\334?d;\337O\215\227\342?\370S\343\245\233\304\340?7\211A`\345\320\346?\031\004V\016-\262\335?F\266\363\375\324x\345?\274t\223\030\004V\342?7\211A`\345\320\346?\\\217\302\365(\\\343?{\024\256G\341z\340?\010\254\034Zd;\337?\307K7\211A`\345?\256G\341z\024\256\347?\264\310v\276\237\032\343?\262\235\357\247\306K\337?7\211A`\345\320\346?}?5^\272I\334?+\207\026\331\316\367\333?\262\235\357\247\306K\337?Zd;\337O\215\337?+\207\026\331\316\367\343?d;\337O\215\227\342?R\270\036\205\353Q\340?7\211A`\345\320\346?+\207\026\331\316\367\333?\236\357\247\306K7\341?\016-\262\235\357\247\342?/\335$\006\201\225\333?d;\337O\215\227\342?+\207\026\331\316\367\343?\033/\335$\006\201\341?\177j\274t\223\030\334?\016-\262\235\357\247\342?\033/\335$\006\201\341?\370S\343\245\233\304\340?\236\357\247\306K7\341?\236\357\247\306K7\341?}?5^\272I\334?\236\357\247\306K7\341?F\266\363\375\324x\345?\244p=\n\327\243\340?\317\367S\343\245\233\334?7\211A`\345\320\346?\260rh\221\355|\343?\232\231\231\231\231\231\331?T\343\245\233\304 \340?\356|?5^\272\345?;\337O\215\227n\332?Zd;\337O\215\337?\236\357\247\306K7\331?D\213l\347\373\251\331?V\016-\262\235\357\337?\254\034Zd;\337\353?\256G\341z\024\256\347?\270\036\205\353Q\270\342?\\\217\302\365(\\\343?\\\217\302\365(\\\343?\317\367S\343\245\233\334?\262\235\357\247\306K\337?/\335$\006\201\225\333?+\207\026\331\316\367\333?\256G\341z\024\256\347?\331\316\367S\343\245\343?\254\034Zd;\337\353?\317\367S\343\245\233\334?\343\245\233\304 \260\342?\223\030\004V\016-\346?\333\371~j\274t\333?7\211A`\345\320\346?\264\310v\276\237\032\343?h\221\355|?5\336?\232\231\231\231\231\231\331?\021\307\272\270\215\006\334?R\270\036\205\353Q\340?\356|?5^\272\345?\244p=\n\327\243\350?T\343\245\233\304 \340?\264\310v\276\237\032\343?T\343\245\233\304 \340?\244p=\n\327\243\340?\264\310v\276\237\032\343?\177j\274t\223\030\334?T\343\245\233\304 \340?\343\245\233\304 \260\342?\274t\223\030\004V\342?\254\034Zd;\337\353?/\335$\006\201\225\333?\\\217\302\365(\\\343?\031\004V\016-\262\335?y\351&1\010\254\334?\016-\262\235\357\247\342?\033/\335$\006\201\341?\223\030\004V\016-\346?\262\235\357\247\306K\337?\244p=\n\327\243\340?\\\217\302\365(\\\343?+\207\026\331\316\367\333?\331\316\367S\343\245\343?#\333\371~j\274\334?\370S\343\245\233\304\340?\236\357\247\306K7\341?{\024\256G\341z\334?\256G\341z\024\256\347?\356|?5^\272\345?\323Mb\020X9\340?\236\357\247\306K7\341?\354Q\270\036\205\353\331?\307K7\211A`\345?\230n\022\203\300\312\331?\240\032/\335$\006\341?\240\032/\335$\006\341?\356|?5^\272\345?y\351&1\010\254\334?\356|?5^\272\345?\244p=\n\327\243\350?\236\357\247\306K7\341?V\016-\262\235\357\337?\313\241E\266\363\375\334?\223\030\004V\016-\346?\234\304 \260rh\341?\323Mb\020X9\340?\270\036\205\353Q\270\342?y\351&1\010\254\334?\203\300\312\241E\266\333?R\270\036\205\353Q\340?\232\231\231\231\231\231\341?7\211A`\345\320\346?+\207\026\331\316\367\333?\236\357\247\306K7\341?/\335$\006\201\225\333?\234\304 \260rh\341?\230n\022\203\300\312\331?+\207\026\331\316\367\343?\236\357\247\306K7\341?\010\254\034Zd;\337?\262\235\357\247\306K\337?+\207\026\331\316\367\343?\232\231\231\231\231\231\331?\033/\335$\006\201\341?\262\235\357\247\306K\337?7\211A`\345\320\346?7\211A`\345\320\346?\256G\341z\024\256\347?T\343\245\233\304 \340?\232\231\231\231\231\231\341?=\n\327\243p=\332?\366(\\\217\302\365\344?\223\030\004V\016-\346?\307K7\211A`\345?\256G\341z\024\256\347?\010\254\034Zd;\337?{\024\256G\341z\334?\033/\335$\006\201\341?\317\367S\343\245\233\334?\033/\335$\006\201\341?ffffff\346?\\\217\302\365(\\\343?\256G\341z\024\256\347?=\n\327\243p=\332?R\270\036\205\353Q\340?Zd;\337O\215\337?D\213l\347\373\251\331?B`\345\320\"\333\331?\244p=\n\327\243\350?\217\302\365(\\\217\342?\010\254\034Zd;\337?\223\030\004V\016-\346?;\337O\215\227n\332?\244p=\n\327\243\340?\323Mb\020X9\340?+\207\026\331\316\367\343?=\n\327\243p=\332?{\024\256G\341z\340?\376\324x\351&1\344?\313\241E\266\363\375\334?\031\004V\016-\262\335?D\213l\347\373\251\331?+\207\026\331\316\367\343?\254\034Zd;\337\353?\217\302\365(\\\217\332?\254\034Zd;\337\353?{\024\256G\341z\340?\331\316\367S\343\245\343?\370S\343\245\233\304\340?\031\004V\016-\262\335?{\024\256G\341z\334?\262\235\357\247\306K\337?1\010\254\034Zd\333?\347\373\251\361\322M\332?\203\300\312\241E\266\333?ffffff\346?\244p=\n\327\243\350?V\016-\262\235\357\337?7\211A`\345\320\346?\236\357\247\306K7\341?\256G\341z\024\256\347?\021\307\272\270\215\006\334?+\207\026\331\316\367\333?\230n\022\203\300\312\331?+\207\026\331\316\367\333?Nb\020X9\264\344?\270\036\205\353Q\270\342?\254\034Zd;\337\353?\256G\341z\024\256\347?j\274t\223\030\004\336?\177j\274t\223\030\334?Nb\020X9\264\344?/\335$\006\201\225\333?7\211A`\345\320\346?Nb\020X9\264\344?{\024\256G\341z\340?\376\324x\351&1\344?Zd;\337O\215\337?\010\254\034Zd;\337?\254\034Zd;\337\353?7\211A`\345\320\346?\203\300\312\241E\266\333?"
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "ffffff2@\232\231\231\231\231\2311@fffff\3461@fffff\3462@3333334@3333335@3333333@\000\000\000\000\000\0005@ffffff0@\315\314\314\314\314\3141@3333334@\232\231\231\231\231\2311@\315\314\314\314\314\3141@\232\231\231\231\231\0310@ffffff2@3333334@3333334@ffffff1@ffffff-@ffffff-@ffffff2@ffffff-@ffffff2@\232\231\231\231\231\2313@\232\231\231\231\231\0310@3333334@\000\000\000\000\000\0005@\315\314\314\314\314\3142@\000\000\000\000\000\000*@3333334@\315\314\314\314\314L2@\232\231\231\231\231\0313@ffffff-@3333334@fffff\3460@3333333@3333334@33333\2632@3333334@3333334@fffff\3460@3333334@ffffff1@3333334@3333334@3333334@ffffff-@3333334@ffffff-@fffff\3464@3333334@\232\231\231\231\231\2310@33333\2632@ffffff-@\232\231\231\231\231\0314@33333\2633@3333334@ffffff2@\000\000\000\000\000\0005@ffffff1@3333334@\000\000\000\000\000\2002@3333334@3333334@\232\231\231\231\231\2312@\315\314\314\314\314\3141@ffffff1@\315\314\314\314\314\314/@\000\000\000\000\000\0000@ffffff-@\232\231\231\231\231\2313@3333334@3333334@\000\000\000\000\000\0005@fffff\3464@3333334@3333334@\232\231\231\231\231\231.@ffffff-@3333333@3333335@\315\314\314\314\314\3141@ffffff.@3333334@33333\2633@\232\231\231\231\231\231-@3333334@\232\231\231\231\231\2313@3333333@3333335@\000\000\000\000\000\0005@\000\000\000\000\000\000*@\232\231\231\231\231\0314@ffffff.@3333334@ffffff.@\000\000\000\000\000\0005@3333332@ffffff1@fffff\3464@3333334@3333334@fffff\3461@33333\2633@3333334@33333\2632@3333334@ffffff-@\315\314\314\314\314\3141@fffff\3464@\000\000\000\000\000\000*@\232\231\231\231\231\2310@3333334@ffffff2@\000\000\000\000\000\000*@ffffff.@3333334@\000\000\000\000\000\0005@\315\314\314\314\314L2@\000\000\000\000\000\000*@fffff\3460@3333334@fffff\3461@3333334@\232\231\231\231\231\2310@3333333@\000\000\000\000\000\0000@\000\000\000\000\000\0005@\232\231\231\231\231\2310@\000\000\000\000\000\0003@fffff\3461@ffffff2@3333332@3333334@\000\000\000\000\000\0003@ffffff2@ffffff-@3333334@\315\314\314\314\314\3141@3333334@\000\000\000\000\000\0006@3333335@fffff\3464@\232\231\231\231\231\2310@3333333@\232\231\231\231\231\0313@\232\231\231\231\231\2313@3333334@\000\000\000\000\000\0002@\232\231\231\231\231\0313@\000\000\000\000\000\000*@\000\000\000\000\000\0005@\000\000\000\000\000\0005@33333\2633@3333334@\315\314\314\314\314L2@3333334@\232\231\231\231\231\2312@\232\231\231\231\231\2312@ffffff1@\000\000\000\000\000\0002@3333334@\232\231\231\231\231\0313@3333334@3333334@3333332@fffff\3461@3333334@3333335@\000\000\000\000\000\0003@3333334@\232\231\231\231\231\2312@\000\000\000\000\000\0005@\315\314\314\314\314\3141@3333334@3333333@ffffff.@ffffff-@ffffff-@fffff\3462@ffffff1@\315\314\314\314\314\3141@3333334@333333)@3333334@\232\231\231\231\231\0313@\232\231\231\231\231\0313@\232\231\231\231\231\2312@33333\2633@\232\231\231\231\231\0313@ffffff.@3333334@\232\231\231\231\231\2312@3333334@\000\000\000\000\000\0005@3333334@ffffff-@3333334@\315\314\314\314\314\3141@3333334@3333334@3333334@\232\231\231\231\231\2312@3333334@\315\314\314\314\314\3142@\000\000\000\000\000\0000@\315\314\314\314\314\3141@\232\231\231\231\231\2313@3333335@\232\231\231\231\231\0313@\232\231\231\231\231\2310@3333334@ffffff.@\000\000\000\000\000\0005@3333334@\232\231\231\231\231\0313@\232\231\231\231\231\0313@3333335@\315\314\314\314\314\3141@\315\314\314\314\314\3140@3333334@\315\314\314\314\314\3141@ffffff.@\000\000\000\000\000\0005@\000\000\000\000\000\0005@\000\000\000\000\000\000/@\232\231\231\231\231\231.@3333334@fffff\3464@\232\231\231\231\231\2311@3333334@\232\231\231\231\231\0314@\232\231\231\231\231\231-@ffffff1@3333334@3333333@\232\231\231\231\231\2313@\315\314\314\314\314\314/@333333+@3333333@ffffff-@3333334@3333333@ffffff-@ffffff-@\232\231\231\231\231\2311@\232\231\231\231\231\2312@\232\231\231\231\231\0313@ffffff.@3333334@3333334@ffffff-@\232\231\231\231\231\2311@3333334@3333334@33333\2633@3333334@3333334@ffffff2@\232\231\231\231\231\231.@fffff\3460@\232\231\231\231\231\2310@3333334@3333334@ffffff1@3333334@ffffff1@fffff\3464@3333334@\315\314\314\314\314\3140@ffffff1@3333334@\000\000\000\000\000\0005@ffffff-@\232\231\231\231\231\0313@ffffff-@\232\231\231\231\231\2312@fffff\3461@3333334@\315\314\314\314\314\3141@3333334@\232\231\231\231\231\2312@fffff\3464@ffffff-@33333\2632@3333334@\000\000\000\000\000\2002@ffffff.@\000\000\000\000\000\0005@\000\000\000\000\000\0002@3333334@3333334@ffffff1@\000\000\000\000\000\0005@\232\231\231\231\231\2310@3333334@fffff\3461@3333334@3333334@3333334@fffff\3461@3333334@3333334@\000\000\000\000\000\0005@3333333@33333\2633@3333334@ffffff2@ffffff1@3333333@fffff\3461@\232\231\231\231\231\0310@\232\231\231\231\231\2310@ffffff0@3333334@\000\000\000\000\000\0000@\000\000\000\000\000\0005@\232\231\231\231\231\0313@ffffff2@\000\000\000\000\000\0001@3333335@\000\000\000\000\000\0005@\315\314\314\314\314\3141@\232\231\231\231\231\2312@3333335@\232\231\231\231\231\231-@\315\314\314\314\314\3141@\232\231\231\231\231\2312@3333334@3333334@3333334@ffffff1@ffffff0@\315\314\314\314\314L1@3333334@3333334@3333334@3333334@\315\314\314\314\314\3141@\000\000\000\000\000\0002@\315\314\314\314\314\3141@\232\231\231\231\231\2311@\315\314\314\314\314\3141@3333334@ffffff-@3333334@\232\231\231\231\231\0315@\232\231\231\231\231\2310@\232\231\231\231\231\2313@333333/@333333)@3333334@3333334@\315\314\314\314\314\3141@3333334@\000\000\000\000\000\0006@fffff\3464@ffffff1@3333335@\000\000\000\000\000\0001@3333334@3333334@33333\2633@3333332@333333/@3333335@ffffff-@ffffff-@ffffff-@3333334@3333334@ffffff.@\232\231\231\231\231\2312@\000\000\000\000\000\0002@\232\231\231\231\231\2312@\232\231\231\231\231\2310@333333.@\232\231\231\231\231\0310@3333334@3333334@3333333@3333334@\000\000\000\000\000\0005@3333334@fffff\3460@33333\2632@\000\000\000\000\000\0001@33333\2632@\000\000\000\000\000\000*@3333333@ffffff-@3333334@\315\314\314\314\314\3141@\315\314\314\314\314\3140@\000\000\000\000\000\000*@\232\231\231\231\231\0313@3333334@\000\000\000\000\000\000*@3333334@3333334@\232\231\231\231\231\2313@\315\314\314\314\314\3141@ffffff-@3333334@\232\231\231\231\231\0310@"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "L7\211A`e\033@b\020X9\264\310\032@\037\205\353Q\270\036\030@P\215\227n\022\203\027@\246\233\304 \260r\025@\260rh\221\355|\031@\205\353Q\270\036\205\032@}?5^\272I\030@\347\373\251\361\322\315\027@^\272I\014\002\253\031@\000\000\000\000\000\000\033@\345\320\"\333\371~\033@\006\201\225C\213\354\026@\331\316\367S\343%\027@d;\337O\215\027\030@;\337O\215\227n\026@\177j\274t\223\230\032@33333s!@\331\316\367S\343\245\030@Nb\020X9\264\023@R\270\036\205\353\321\026@P\215\227n\022\203\026@\370S\343\245\233D\032@)\\\217\302\365\250\031@)\\\217\302\365(\031@/\335$\006\201\225\027@\374\251\361\322Mb\030@u\223\030\004V\016\030@\024\256G\341z\024\036@\217\302\365(\\\217\025@7\211A`\345P\032@\354Q\270\036\205k\026@\305 \260rh\021 @\033/\335$\006\001\031@\372~j\274t\223\030@Nb\020X9\264\027@w\276\237\032/]\031@J\014\002+\207\226\034@Zd;\337O\215\020@\333\371~j\274t\030@\242E\266\363\375T\031@=\n\327\243p=\031@F\266\363\375\324x\032@\331\316\367S\343\245\030@=\n\327\243p\275\030@\262\235\357\247\306K\033@h\221\355|?5\037@?5^\272I\214\027@\201\225C\213lg\030@\037\205\353Q\270\236\031@\354Q\270\036\205\353\033@;\337O\215\227n\031@\270\036\205\353Q\270\031@-\262\235\357\247F\031@\254\034Zd;_\024@m\347\373\251\361\322\031@\234\304 \260rh\027@\260rh\221\355|\030@\366(\\\217\302\365\027@X9\264\310v~ @\276\237\032/\335\244\031@\205\353Q\270\036\205\032@\260rh\221\355\374\026@1\010\254\034Zd\031@\331\316\367S\343\245\025@\354Q\270\036\205\353\033@\006\201\225C\213\254 @)\\\217\302\365(\032@\360\247\306K7\t\030@\321\"\333\371~j\027@sh\221\355|?\031@\317\367S\343\245\233\022@\'1\010\254\034\332\023@\031\004V\016-\262\032@5^\272I\014\202\030@?5^\272I\014\027@\252\361\322Mb\020\034@\035Zd;\337\317\031@\n\327\243p=\n\032@d;\337O\215\227\034@\323Mb\020X\271\031@/\335$\006\201\025\030@=\n\327\243p\275\034@j\274t\223\030\204\032@\366(\\\217\302\365\031@\341z\024\256Ga\031@^\272I\014\002\253\031@\323Mb\020X\271\031@\223\030\004V\016-\027@\327\243p=\nW\031@\201\225C\213l\347\033@\234\304 \260rh!@;\337O\215\227\356\027@?5^\272I\014\030@\002+\207\026\331\316\030@\360\247\306K7\t\030@\254\034Zd;_\032@\370S\343\245\233\304\031@\325x\351&1\210 @H\341z\024\256\307\030@\014\002+\207\026Y\027@q=\n\327\243\360\031@\223\030\004V\016\255\030@\024\256G\341z\224\030@\317\367S\343\245\033\025@!\260rh\221\355\030@\303\365(\\\217B\026@\000\000\000\000\000\000\031@\351&1\010\254\234\030@9\264\310v\276\037\033@\341z\024\256G\341\035@D\213l\347\373\251\031@\022\203\300\312\241\305\030@\256G\341z\024\256\035@\242E\266\363\375T\035@\203\300\312\241E\266\034@q=\n\327\243\360\027@m\347\373\251\361\322\025@\177j\274t\223\030\034@\362\322Mb\020\230 @F\266\363\375\324x\027@\266\363\375\324x\351\032@\024\256G\341z\024\033@\033/\335$\006\001\031@\303\365(\\\217B\032@\372~j\274t\023\030@5^\272I\014\202\030@{\024\256G\341z\030@}?5^\272I\026@\234\304 \260r\350\032@\276\237\032/\335$\027@\272I\014\002+\207\031@\362\322Mb\020\330\030@\276\237\032/\335$\024@`\345\320\"\333y\032@\213l\347\373\251\361\034@\351&1\010\254\234\025@\201\225C\213l\347\027@\217\302\365(\\\017\037@\254\034Zd;\337\033@X9\264\310v\276\027@\264\310v\276\237\232\030@\362\322Mb\020X\027@\006\201\225C\213\354\031@\213l\347\373\251q\033@;\337O\215\227n\030@Nb\020X9\264\031@P\215\227n\022\003\030@\000\000\000\000\000\200\032@\362\322Mb\020\330\027@\035Zd;\337\317\034@\215\227n\022\203@\027@\262\235\357\247\306\313\027@w\276\237\032/\335\027@\223\030\004V\016-\033@\341z\024\256Ga\032@\260rh\221\355|\014@\364\375\324x\351&\032@\250\306K7\211A\030@\240\032/\335$\206\032@H\341z\024\256G\037@\217\302\365(\\\217!@\254\034Zd;\337\032@\240\032/\335$\006\030@d;\337O\215\227\026@\354Q\270\036\205\353\030@\252\361\322Mb\020\032@\205\353Q\270\036\205\031@\022\203\300\312\241\305\026@h\221\355|?5\031@Zd;\337O\r\032@o\022\203\300\312!\027@\343\245\233\304 0\030@7\211A`\345P\034@\'1\010\254\034\332\026@{\024\256G\341\372\030@T\343\245\233\304 \033@\205\353Q\270\036\205\027@\333\371~j\274\364\035@\n\327\243p=\212\027@\016-\262\235\357\247\030@\037\205\353Q\270\236\031@T\343\245\233\304\240\032@!\260rh\221m\034@\024\256G\341z\024\026@\213l\347\373\251\361\027@\201\225C\213l\347\030@\335$\006\201\225\303\036@h\221\355|?\265\027@{\024\256G\341z\027@u\223\030\004V\216\027@\232\231\231\231\231\031\032@\006\201\225C\213l\027@\215\227n\022\203@\035@\037\205\353Q\270\036\030@m\347\373\251\361R\030@\022\203\300\312\241\305\033@\254\034Zd;\337\027@m\347\373\251\361R\037@\000\000\000\000\000\200\027@\307K7\211A\340\030@P\215\227n\022\203\022@\000\000\000\000\000\200\031@\343\245\233\304 0\031@d;\337O\215\227\027@\203\300\312\241E\266\032@\272I\014\002+\007\034@D\213l\347\373)\030@\347\373\251\361\322M\031@j\274t\223\030\204\027@V\016-\262\235o\027@\033/\335$\006\201\031@\333\371~j\274\364\032@\374\251\361\322Mb\030@\226C\213l\347{\027@\246\233\304 \260\362\031@\006\201\225C\213l\027@!\260rh\221m\027@\\\217\302\365(\334\032@\366(\\\217\302u\030@sh\221\355|?\031@\364\375\324x\351\246\027@j\274t\223\030\004\030@\234\304 \260r\350\026@=\n\327\243p\275\027@\020X9\264\310\366\034@\315\314\314\314\314L\032@1\010\254\034Z\344\030@\201\225C\213lg\027@\347\373\251\361\322M\033@\345\320\"\333\371\376\032@7\211A`\345\320\025@\226C\213l\347{\033@\006\201\225C\213\354\027@\205\353Q\270\036\205\031@^\272I\014\002\253\031@\242E\266\363\375\324\026@7\211A`\345\320\035@\376\324x\351&\261\037@w\276\237\032/\335\027@\260rh\221\355|\030@=\n\327\243p\275\027@\207\026\331\316\367\323\026@\000\000\000\000\000\300 @5^\272I\014\202\027@\325x\351&1\010\033@\347\373\251\361\322M\031@\254\034Zd;_\026@\323Mb\020X9\032@\362\322Mb\020\330\031@V\016-\262\235\357\031@\205\353Q\270\036\205\030@\321\"\333\371~j\033@33333\263\031@L7\211A`e\025@\250\306K7\211\301\033@X9\264\310v\276\031@\272I\014\002+\007\027@\020X9\264\310v\032@\'1\010\254\034Z\034@m\347\373\251\361\322\026@\311v\276\237\032/\032@\236\357\247\306K7\025@\203\300\312\241E6\027@h\221\355|?5\032@\234\304 \260rh\033@X9\264\310v\276\036@\234\304 \260r\350\032@+\207\026\331\316w\026@\313\241E\266\363\375\027@\364\375\324x\351\246\034@h\221\355|?\265\025@\223\030\004V\016-\033@j\274t\223\030\204\030@\215\227n\022\203\300\031@\335$\006\201\225C\030@\366(\\\217\302\365\030@-\262\235\357\247F\030@\037\205\353Q\270\236\027@\221\355|?5^\030@\246\233\304 \260\362\027@\004V\016-\262\235\025@L7\211A`\345\031@\317\367S\343\245\233\031@\345\320\"\333\371~\027@\236\357\247\306K7\025@u\223\030\004V\216\031@\240\032/\335$\206\026@\315\314\314\314\314\314\027@D\213l\347\373\251\035@\022\203\300\312\241E\027@T\343\245\233\304 \033@j\274t\223\030\204\033@{\024\256G\341\372\031@\274t\223\030\004\326\030@Zd;\337O\215\020@\345\320\"\333\371\376\034@+\207\026\331\316\367\030@X9\264\310v>\034@#\333\371~j\274\031@\177j\274t\223\230\025@\207\026\331\316\367\323\027@5^\272I\014\202\030@\347\373\251\361\322\315\026@\010\254\034Zd\273\027@?5^\272I\014\033@9\264\310v\276\037\026@1\010\254\034Z\344\023@\201\225C\213l\347\032@\256G\341z\024\256\026@\356|?5^\272\026@!\260rh\221\355\033@\303\365(\\\217B\031@\313\241E\266\363}\031@\037\205\353Q\270\236\032@\031\004V\016-2\032@\\\217\302\365(\334\027@\010\254\034Zd\273\031@\027\331\316\367S\343\027@fffff\346\033@7\211A`\345\320\031@\031\004V\016-\262\027@\321\"\333\371~j\026@\252\361\322Mb\220\027@\272I\014\002+\007\027@D\213l\347\373)\034@Nb\020X9\264\030@\356|?5^:\027@X9\264\310v\276\027@\242E\266\363\375\324\030@9\264\310v\276\237\031@\331\316\367S\343\245\035@\305 \260rh\221\032@\325x\351&1\210\031@\002+\207\026\331\316\027@\254\034Zd;_\031@9\264\310v\276\237\023@5^\272I\014\202\026@\372~j\274t\223\030@\027\331\316\367S# @j\274t\223\030\004\031@!\260rh\221\355\031@\260rh\221\355|\027@\276\237\032/\335$\026@\000\000\000\000\000\200\027@\317\367S\343\245\233\030@Zd;\337O\215\027@\024\256G\341z\024\030@\242E\266\363\375T\030@\321\"\333\371~j\032@\177j\274t\223\030\035@d;\337O\215\227\031@sh\221\355|\277\031@\037\205\353Q\270\236\034@\372~j\274t\023\022@\364\375\324x\351\246\026@?5^\272I\214\030@\347\373\251\361\322\315\033@\242E\266\363\375\324\031@\266\363\375\324x\351\032@#\333\371~j<\030@\341z\024\256G\341\023@\020X9\264\310\366\026@\345\320\"\333\371\376\030@333333\033@\031\004V\016-\262\030@X9\264\310v\276\024@q=\n\327\243p\036@?5^\272I\014\024@\024\256G\341z\224\027@\321\"\333\371~\352\030@5^\272I\014\202\031@\256G\341z\024\256\027@\364\375\324x\351\246\030@\327\243p=\n\327\027@J\014\002+\207\226\033@\335$\006\201\225C\033@\\\217\302\365(\\\032@\205\353Q\270\036\205\023@\246\233\304 \260r\030@w\276\237\032/]\027@\337O\215\227n\222\035@H\341z\024\256G\026@\274t\223\030\004\326\031@9\264\310v\276\037\030@\276\237\032/\335$\031@\n\327\243p=\212\034@\217\302\365(\\\217\030@\002+\207\026\331N\035@-\262\235\357\247F\026@\027\331\316\367Sc\026@\321\"\333\371~j\027@=\n\327\243p\275\034@%\006\201\225C\013\032@\262\235\357\247\306\313 @\370S\343\245\233\204 @\370S\343\245\233D\031@\221\355|?5^\033@\335$\006\201\225C\031@\010\254\034Zd\273\032@\033/\335$\006\201\031@\215\227n\022\203@\032@\004V\016-\262\235\025@Nb\020X94\031@{\024\256G\341\372\031@"
      }
    }
  }
}
node {
  name: "normalize_element/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "\000\000\000\000\000\300k@\000\000\000\000\000 w@\000\000\000\000\000 m@\000\000\000\000\000\220u@\000\000\000\000\000\320\204@\000\000\000\000\000P{@\000\000\000\000\000\240n@\000\000\000\000\0000s@\000\000\000\000\000@q@\000\000\000\000\000\340p@\000\000\000\000\000\320\204@\000\000\000\000\000 w@\000\000\000\000\000\000{@\000\000\000\000\000\020u@\000\000\000\000\000\000s@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000\300u@\000\000\000\000\0000y@\000\000\000\000\000\000s@\000\000\000\000\0000y@\000\000\000\000\000\000s@\000\000\000\000\000\360q@\000\000\000\000\000\020u@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000\000v@\000\000\000\000\000\200p@\000\000\000\000\000\320\204@\000\000\000\000\000\260y@\000\000\000\000\000\240t@\000\000\000\000\000\000l@\000\000\000\000\000\320\204@\000\000\000\000\000\340z@\000\000\000\000\000px@\000\000\000\000\000\320\204@\000\000\000\000\000\300k@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\340z@\000\000\000\000\000\000l@\000\000\000\000\0000s@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000y@\000\000\000\000\000\320\204@\000\000\000\000\0000y@\000\000\000\000\000\000x@\000\000\000\000\000\320\204@\000\000\000\000\000\300r@\000\000\000\000\000\300k@\000\000\000\000\0000y@\000\000\000\000\0008\206@\000\000\000\000\000\300q@\000\000\000\000\000\320\204@\000\000\000\000\000\000s@\000\000\000\000\0000s@\000\000\000\000\0000s@\000\000\000\000\000\320\204@\000\000\000\000\000\340n@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000Pq@\000\000\000\000\000 h@\000\000\000\000\0000s@\000\000\000\000\000`z@\000\000\000\000\000\020r@\000\000\000\000\0000y@\000\000\000\000\000\360q@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000\000x@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\300r@\000\000\000\000\0000y@\000\000\000\000\000\240n@\000\000\000\000\000P{@\000\000\000\000\000\000{@\000\000\000\000\000\340x@\000\000\000\000\000\320\204@\000\000\000\000\000\360t@\000\000\000\000\000`v@\000\000\000\000\000\320\204@\000\000\000\000\000\360q@\000\000\000\000\000px@\000\000\000\000\000P{@\000\000\000\000\000\020q@\000\000\000\000\000\200p@\000\000\000\000\0008\206@\000\000\000\000\000ps@\000\000\000\000\000\320\204@\000\000\000\000\000ps@\000\000\000\000\000\020q@\000\000\000\000\000\340p@\000\000\000\000\0000s@\000\000\000\000\000\000x@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000 m@\000\000\000\000\000\300q@\000\000\000\000\000\320\204@\000\000\000\000\000\340x@\000\000\000\000\000\320\204@\000\000\000\000\0000y@\000\000\000\000\000 h@\000\000\000\000\000\000x@\000\000\000\000\000\200p@\000\000\000\000\000\200r@\000\000\000\000\000\320\204@\000\000\000\000\000\300k@\000\000\000\000\000\200p@\000\000\000\000\000\340x@\000\000\000\000\000\000l@\000\000\000\000\0000s@\000\000\000\000\000\200o@\000\000\000\000\000\200p@\000\000\000\000\000\340z@\000\000\000\000\000\320\204@\000\000\000\000\000 m@\000\000\000\000\000\320\204@\000\000\000\000\000Pr@\000\000\000\000\000px@\000\000\000\000\000\020r@\000\000\000\000\000\020q@\000\000\000\000\000\200r@\000\000\000\000\000\220q@\000\000\000\000\000 m@\000\000\000\000\000\000s@\000\000\000\000\000\340p@\000\000\000\000\000\320\204@\000\000\000\000\000\220q@\000\000\000\000\000\300k@\000\000\000\000\0000y@\000\000\000\000\000\320\204@\000\000\000\000\000 h@\000\000\000\000\000\320\204@\000\000\000\000\000\340t@\000\000\000\000\000P{@\000\000\000\000\000\000x@\000\000\000\000\000\300r@\000\000\000\000\000\240n@\000\000\000\000\000\240t@\000\000\000\000\000\360q@\000\000\000\000\000\320\204@\000\000\000\000\000@q@\000\000\000\000\000\200g@\000\000\000\000\000\200p@\000\000\000\000\0000s@\000\000\000\000\0000s@\000\000\000\000\000\300q@\000\000\000\000\000\320\204@\000\000\000\000\000\200o@\000\000\000\000\000\320\204@\000\000\000\000\000\340k@\000\000\000\000\000Pq@\000\000\000\000\0000s@\000\000\000\000\000@q@\000\000\000\000\000\320\204@\000\000\000\000\000\240t@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000 n@\000\000\000\000\000\360u@\000\000\000\000\000\320\204@\000\000\000\000\000P{@\000\000\000\000\000\220q@\000\000\000\000\000\320\204@\000\000\000\000\000Pq@\000\000\000\000\0000s@\000\000\000\000\000\340p@\000\000\000\000\000\320\204@\000\000\000\000\000\020s@\000\000\000\000\000\340x@\000\000\000\000\0000y@\000\000\000\000\0000y@\000\000\000\000\000\220u@\000\000\000\000\0000s@\000\000\000\000\000\340p@\000\000\000\000\000\320\204@\000\000\000\000\000\220t@\000\000\000\000\000\320\204@\000\000\000\000\000\200g@\000\000\000\000\000\240t@\000\000\000\000\000\340k@\000\000\000\000\000\300q@\000\000\000\000\000\200g@\000\000\000\000\000ps@\000\000\000\000\000\320\204@\000\000\000\000\000\340k@\000\000\000\000\000\320\204@\000\000\000\000\000\020q@\000\000\000\000\000\320\204@\000\000\000\000\0000y@\000\000\000\000\000\000l@\000\000\000\000\000 h@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000Pq@\000\000\000\000\000\320\204@\000\000\000\000\000\000v@\000\000\000\000\000\020r@\000\000\000\000\000\340p@\000\000\000\000\000\360q@\000\000\000\000\000P{@\000\000\000\000\000\200g@\000\000\000\000\000\200r@\000\000\000\000\000\320\204@\000\000\000\000\000\340x@\000\000\000\000\0000s@\000\000\000\000\000\320\204@\000\000\000\000\000\240t@\000\000\000\000\000\200g@\000\000\000\000\000P{@\000\000\000\000\000\000{@\000\000\000\000\000`n@\000\000\000\000\000\320\204@\000\000\000\000\000\000{@\000\000\000\000\000ps@\000\000\000\000\0000s@\000\000\000\000\0000s@\000\000\000\000\000\300q@\000\000\000\000\000\200r@\000\000\000\000\000\320\204@\000\000\000\000\000\000x@\000\000\000\000\000\300o@\000\000\000\000\000\320\204@\000\000\000\000\0008\206@\000\000\000\000\000`v@\000\000\000\000\0000s@\000\000\000\000\000\320\204@\000\000\000\000\000\020s@\000\000\000\000\000\360q@\000\000\000\000\000\200n@\000\000\000\000\000\300h@\000\000\000\000\000pq@\000\000\000\000\0000y@\000\000\000\000\000\320\204@\000\000\000\000\000px@\000\000\000\000\0000y@\000\000\000\000\0000y@\000\000\000\000\000\300o@\000\000\000\000\000Pq@\000\000\000\000\000\240t@\000\000\000\000\000\340x@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000y@\000\000\000\000\000\300o@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\360t@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\300k@\000\000\000\000\000\320q@\000\000\000\000\000\000s@\000\000\000\000\000\200r@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000\000x@\000\000\000\000\000\320\204@\000\000\000\000\000`n@\000\000\000\000\0000s@\000\000\000\000\000\320\204@\000\000\000\000\000\020q@\000\000\000\000\0000y@\000\000\000\000\000\240t@\000\000\000\000\0000y@\000\000\000\000\000\340k@\000\000\000\000\000 m@\000\000\000\000\000\320\204@\000\000\000\000\000\000{@\000\000\000\000\000\320\204@\000\000\000\000\000Pq@\000\000\000\000\000\000x@\000\000\000\000\0000y@\000\000\000\000\000\340x@\000\000\000\000\000\320\204@\000\000\000\000\000\340n@\000\000\000\000\000ps@\000\000\000\000\0000s@\000\000\000\000\000@q@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\0000s@\000\000\000\000\000Pr@\000\000\000\000\000\320\204@\000\000\000\000\000@l@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000 m@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000pq@\000\000\000\000\000\300q@\000\000\000\000\000\320\204@\000\000\000\000\000\000s@\000\000\000\000\0000s@\000\000\000\000\000px@\000\000\000\000\000 m@\000\000\000\000\000\220t@\000\000\000\000\000\200r@\000\000\000\000\000@q@\000\000\000\000\000\320\204@\000\000\000\000\000\020r@\000\000\000\000\0000s@\000\000\000\000\000\240t@\000\000\000\000\000\000s@\000\000\000\000\000 y@\000\000\000\000\000P{@\000\000\000\000\0000s@\000\000\000\000\000 h@\000\000\000\000\000Pq@\000\000\000\000\000P{@\000\000\000\000\000`v@\000\000\000\000\000\000{@\000\000\000\000\000Pq@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000@q@\000\000\000\000\000\220s@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000 h@\000\000\000\000\000@q@\000\000\000\000\000\000{@\000\000\000\000\000\300o@\000\000\000\000\000\000{@\000\000\000\000\000\320\204@\000\000\000\000\0000y@\000\000\000\000\000\320\204@\000\000\000\000\000P}@\000\000\000\000\000\200r@\000\000\000\000\000\360q@\000\000\000\000\000\220p@\000\000\000\000\000\220t@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000 h@\000\000\000\000\000\320\204@\000\000\000\000\000\340t@\000\000\000\000\000\000x@\000\000\000\000\0000s@\000\000\000\000\000P{@\000\000\000\000\000`g@\000\000\000\000\000\000l@\000\000\000\000\000\320\204@\000\000\000\000\000\300q@\000\000\000\000\000\340p@\000\000\000\000\000\220p@\000\000\000\000\000P{@\000\000\000\000\0000y@\000\000\000\000\000\300u@\000\000\000\000\0000y@\000\000\000\000\000\000l@\000\000\000\000\000\320\204@\000\000\000\000\000ps@\000\000\000\000\000\340k@\000\000\000\000\000@q@\000\000\000\000\000Pq@\000\000\000\000\000\300r@\000\000\000\000\000\000p@\000\000\000\000\000\220t@\000\000\000\000\000\320\204@\000\000\000\000\000\320\204@\000\000\000\000\000pq@\000\000\000\000\000\320\204@\000\000\000\000\0000s@\000\000\000\000\000\320\204@\000\000\000\000\000\000s@\000\000\000\000\000\340x@\000\000\000\000\000 y@\000\000\000\000\000\340x@\000\000\000\000\000\200p@\000\000\000\000\000px@\000\000\000\000\0000y@\000\000\000\000\000\320\204@\000\000\000\000\000@n@\000\000\000\000\000`n@\000\000\000\000\000\200p@\000\000\000\000\000\240t@\000\000\000\000\000\320\204@\000\000\000\000\000\200p@\000\000\000\000\000\000l@\000\000\000\000\000\320\204@\000\000\000\000\000\360q@\000\000\000\000\000 h@\000\000\000\000\0000y@\000\000\000\000\000\320\204@\000\000\000\000\000\220t@"
      }
    }
  }
}
node {
  name: "normalize_element/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "normalize_element/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 405
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 405
          }
        }
        tensor_content: "333333<@fffff\3467@\232\231\231\231\231\2310@\000\000\000\000\000\0006@\315\314\314\314\314\3144@\000\000\000\000\000\0007@fffff\346;@\000\000\000\000\000\000-@\000\000\000\000\000\2005@\232\231\231\231\231\2316@33333\2637@333333?@\315\314\314\314\314L3@ffffff3@ffffff3@fffff\346;@\315\314\314\314\314\314+@\000\000\000\000\000\000I@\232\231\231\231\231\0318@333333-@3333330@333333/@\315\314\314\314\314\3147@\000\000\000\000\000\0009@\000\000\000\000\000\2007@\232\231\231\231\231\231 @\000\000\000\000\000\000+@\000\000\000\000\000\2001@\315\314\314\314\314\214E@\000\000\000\000\000\000\'@\232\231\231\231\231\0318@\000\000\000\000\000\2002@\000\000\000\000\000\000I@333333)@\315\314\314\314\314\3143@\000\000\000\000\000\2008@\315\314\314\314\314\314-@\232\231\231\231\231\031B@\315\314\314\314\314\314\'@\232\231\231\231\231\0313@\232\231\231\231\231\2316@33333\2634@\232\231\231\231\231\031>@\232\231\231\231\231\231*@333333-@\315\314\314\314\314\314 @\000\000\000\000\000\000I@ffffff)@\000\000\000\000\000\0009@\232\231\231\231\231\2312@\315\314\314\314\314\314=@3333336@33333\263<@\315\314\314\314\314\3147@333333 @3333336@333333\031@\232\231\231\231\231\0316@\000\000\000\000\000\2001@fffff&H@33333\2630@\232\231\231\231\231\231:@\000\000\000\000\000\000!@\000\000\000\000\000\000-@33333\2637@\232\231\231\231\231\231B@\232\231\231\231\231\331D@\000\000\000\000\000\2000@33333\2635@33333\2636@\000\000\000\000\000\0007@\000\000\000\000\000\000%@fffff\3465@\000\000\000\000\000\0005@ffffff4@\315\314\314\314\314\3145@\000\000\000\000\000\000I@\000\000\000\000\000\0006@\315\314\314\314\314L7@fffff\246B@\000\000\000\000\000\0002@3333333@33333sA@\315\314\314\314\314\314*@fffff\3466@\000\000\000\000\000\2006@\000\000\000\000\000\000*@\232\231\231\231\231\2318@\315\314\314\314\314L2@\232\231\231\231\231\0312@fffff\3467@\000\000\000\000\000\000I@333333+@fffff\3466@\315\314\314\314\314\314%@fffff\3462@ffffff6@fffff\3466@ffffffF@33333\2635@ffffff$@\315\314\314\314\314\314.@\315\314\314\314\314L9@\315\314\314\314\314L7@\315\314\314\314\314\314\034@3333335@ffffff\'@\000\000\000\000\000\000;@\232\231\231\231\231\231=@\000\000\000\000\000\200:@\000\000\000\000\000\300E@\232\231\231\231\231\2317@\000\000\000\000\000\000&@33333\263@@\000\000\000\000\000\000B@333333B@\000\000\000\000\000\0003@3333334@33333sA@\000\000\000\000\000\000I@\315\314\314\314\314L3@\315\314\314\314\314\314-@\232\231\231\231\231\231:@fffff\3463@\315\314\314\314\314\3148@3333335@fffff\3467@\232\231\231\231\231\2314@\232\231\231\231\231\0317@\000\000\000\000\000\000<@\000\000\000\000\000\0004@\232\231\231\231\231\0317@\000\000\000\000\000\0009@ffffff#@fffff\3467@\315\314\314\314\314\014B@\315\314\314\314\314\314*@ffffff)@fffff\346C@\315\314\314\314\314\314$@\232\231\231\231\231\2314@\315\314\314\314\314\3141@\000\000\000\000\000\2003@33333\2637@\000\000\000\000\000\200<@\315\314\314\314\314L8@\315\314\314\314\314\3147@\232\231\231\231\231\0313@ffffff<@\000\000\000\000\000\2004@fffff\346@@\000\000\000\000\000\000-@ffffff4@\000\000\000\000\000\0000@\232\231\231\231\231\231*@\315\314\314\314\314\314>@\000\000\000\000\000\200;@ffffff8@ffffff8@\232\231\231\231\231\0319@fffff\346E@fffff\3465@333333:@ffffff,@\315\314\314\314\314\3144@\232\231\231\231\231\0314@\232\231\231\231\231\0317@333333*@3333330@\315\314\314\314\314\3148@3333334@\000\000\000\000\000\2006@\232\231\231\231\231\231-@33333\263<@\232\231\231\231\231\0314@ffffff7@\000\000\000\000\000\000@@\232\231\231\231\231\0313@\000\000\000\000\000\000I@fffff\3464@33333\2635@\000\000\000\000\000\0006@3333331@\315\314\314\314\314L>@\232\231\231\231\231\231(@ffffff5@\000\000\000\000\000\2004@\232\231\231\231\231\231A@\232\231\231\231\231\2313@\000\000\000\000\000\0006@33333\2635@333333,@\232\231\231\231\231\0315@\000\000\000\000\000\000.@\315\314\314\314\314\314\'@\000\000\000\000\000\0004@fffff\246D@33333\2632@\000\000\000\000\000\000I@\000\000\000\000\000\000I@ffffff2@fffff\3461@\232\231\231\231\231\031<@\232\231\231\231\231\0310@3333331@\232\231\231\231\231\231<@\232\231\231\231\231\2317@ffffff4@\232\231\231\231\231\2313@\315\314\314\314\314\3142@\232\231\231\231\231\2316@33333\2631@\000\000\000\000\000\200>@3333332@\232\231\231\231\231\2314@ffffff8@\315\314\314\314\314L1@\232\231\231\231\231\231*@\315\314\314\314\314\3146@\000\000\000\000\000\2004@3333335@\315\314\314\314\314\3142@fffff\3462@3333332@\232\231\231\231\231\0317@\232\231\231\231\231Y@@\000\000\000\000\000\0008@ffffff$@\000\000\000\000\000\2003@\315\314\314\314\314\214@@\315\314\314\314\314\314*@ffffff.@\315\314\314\314\314\3148@\315\314\314\314\314L8@\000\000\000\000\000\000#@3333338@\000\000\000\000\000\2002@\000\000\000\000\000\000F@\000\000\000\000\000\000I@33333\2638@\000\000\000\000\000\2005@\315\314\314\314\314\314 @\315\314\314\314\314\3145@\000\000\000\000\000\000I@\315\314\314\314\314\3147@333333@@ffffff8@\232\231\231\231\231\2311@\315\314\314\314\314\314=@333333#@33333\2630@\232\231\231\231\231\231+@\000\000\000\000\000\000@@\232\231\231\231\231\0310@\232\231\231\231\231\231 @\232\231\231\231\231\231:@\232\231\231\231\231\231,@\000\000\000\000\000\000.@ffffff<@\232\231\231\231\231\031@@\232\231\231\231\231\0311@ffffff=@\315\314\314\314\314\314$@\315\314\314\314\314\3140@\000\000\000\000\000\200?@\000\000\000\000\000\200;@\232\231\231\231\231YG@\000\000\000\000\000\200;@3333331@ffffff7@\232\231\231\231\231\231?@\232\231\231\231\231\231+@\000\000\000\000\000\0006@\000\000\000\000\000\0001@\315\314\314\314\314\3148@\315\314\314\314\314L8@3333339@3333335@\232\231\231\231\231\2314@33333\2632@ffffff\026@\315\314\314\314\314L3@\315\314\314\314\314\3143@\315\314\314\314\314L6@\315\314\314\314\314L4@\000\000\000\000\000\000(@fffff\3467@\000\000\000\000\000\2000@ffffff*@\232\231\231\231\231\231@@\000\000\000\000\000\000%@\000\000\000\000\000\000\036@\000\000\000\000\000\200;@ffffff2@3333337@\232\231\231\231\231\231+@33333\263A@\000\000\000\000\000\0007@\000\000\000\000\000\0009@\315\314\314\314\314\314\034@\315\314\314\314\314\314,@\232\231\231\231\231\231!@33333\2636@333333*@fffff\3462@\000\000\000\000\000\0009@\000\000\000\000\000\000!@\232\231\231\231\231\0310@\000\000\000\000\000\000=@\232\231\231\231\231\0317@\315\314\314\314\314L3@\315\314\314\314\314\214@@\232\231\231\231\231\2318@\000\000\000\000\000\0007@ffffff.@\232\231\231\231\231\031;@\232\231\231\231\231\2313@\000\000\000\000\000\2008@\315\314\314\314\314L4@33333sA@\232\231\231\231\231\0311@333333/@ffffff:@\232\231\231\231\231\2316@333333/@\000\000\000\000\000\000=@3333335@ffffff6@\000\000\000\000\000\000+@ffffff\'@\232\231\231\231\231\0311@33333\263?@33333\263<@33333\2638@\000\000\000\000\000\0003@\315\314\314\314\314\314\034@\232\231\231\231\231\231+@\232\231\231\231\231\231)@\232\231\231\231\231\031B@\232\231\231\231\231YC@\000\000\000\000\000\2002@\232\231\231\231\231\031=@ffffff4@\232\231\231\231\231\231&@ffffff1@ffffff!@fffff\3462@3333337@3333336@\232\231\231\231\231\031=@\315\314\314\314\314LA@\000\000\000\000\000\0009@3333337@33333\363B@\000\000\000\000\000\000\034@3333332@\315\314\314\314\314L3@33333\263:@3333333@\232\231\231\231\231\031>@\232\231\231\231\231\2314@\000\000\000\000\000\000I@33333\2632@\232\231\231\231\231\2314@\232\231\231\231\231\031?@\000\000\000\000\000\000,@\315\314\314\314\314\3141@fffff&E@\232\231\231\231\231\231.@\000\000\000\000\000\2002@ffffff5@\000\000\000\000\000\000.@33333\2634@ffffff5@33333\2635@\000\000\000\000\000\0006@\232\231\231\231\231\231?@\000\000\000\000\000\0006@ffffff$@\232\231\231\231\231\2316@\000\000\000\000\000\0004@\315\314\314\314\314\3141@333333+@\232\231\231\231\231\231\'@ffffff3@ffffff5@33333s@@\315\314\314\314\314\3144@\000\000\000\000\000\000?@\000\000\000\000\000\2001@\315\314\314\314\314\314.@\232\231\231\231\231\231%@\232\231\231\231\231YA@\000\000\000\000\000\0009@ffffffH@ffffffE@\000\000\000\000\000\2003@\232\231\231\231\231\031>@3333336@\000\000\000\000\000\000I@\232\231\231\231\231\0317@\000\000\000\000\000@@@\232\231\231\231\231\2313@\315\314\314\314\314\314-@ffffff:@"
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  input: "normalize_element/component_10"
  input: "normalize_element/component_11"
  input: "normalize_element/component_12"
  input: "normalize_element/component_13"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "ShuffleDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1400
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "BatchDatasetV2"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "RepeatDataset"
  input: "optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_6"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/AGE/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/AGE/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/AGE/weights"
    }
  }
}
node {
  name: "linear/linear_model/AGE/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/AGE/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/AGE/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/AGE/weights"
  input: "linear/linear_model/AGE/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/AGE/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/AGE/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/B/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/B/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/B/weights"
    }
  }
}
node {
  name: "linear/linear_model/B/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/B/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/B/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/B/weights"
  input: "linear/linear_model/B/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/B/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/B/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/CHAS/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/CHAS/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/CHAS/weights"
    }
  }
}
node {
  name: "linear/linear_model/CHAS/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/CHAS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/CHAS/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/CHAS/weights"
  input: "linear/linear_model/CHAS/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/CHAS/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/CHAS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/CRIM/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/CRIM/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/CRIM/weights"
    }
  }
}
node {
  name: "linear/linear_model/CRIM/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/CRIM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/CRIM/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/CRIM/weights"
  input: "linear/linear_model/CRIM/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/CRIM/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/CRIM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/DIS/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/DIS/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/DIS/weights"
    }
  }
}
node {
  name: "linear/linear_model/DIS/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/DIS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/DIS/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/DIS/weights"
  input: "linear/linear_model/DIS/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/DIS/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/DIS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/INDUS/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/INDUS/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/INDUS/weights"
    }
  }
}
node {
  name: "linear/linear_model/INDUS/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/INDUS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/INDUS/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/INDUS/weights"
  input: "linear/linear_model/INDUS/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/INDUS/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/INDUS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/LSTAT/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/LSTAT/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/LSTAT/weights"
    }
  }
}
node {
  name: "linear/linear_model/LSTAT/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/LSTAT/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/LSTAT/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/LSTAT/weights"
  input: "linear/linear_model/LSTAT/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/LSTAT/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/LSTAT/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/NOX/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/NOX/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/NOX/weights"
    }
  }
}
node {
  name: "linear/linear_model/NOX/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NOX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/NOX/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/NOX/weights"
  input: "linear/linear_model/NOX/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/NOX/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NOX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/PTRATIO/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/PTRATIO/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/PTRATIO/weights"
    }
  }
}
node {
  name: "linear/linear_model/PTRATIO/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/PTRATIO/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/PTRATIO/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/PTRATIO/weights"
  input: "linear/linear_model/PTRATIO/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/PTRATIO/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/PTRATIO/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/RAD/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/RAD/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/RAD/weights"
    }
  }
}
node {
  name: "linear/linear_model/RAD/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/RAD/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/RAD/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/RAD/weights"
  input: "linear/linear_model/RAD/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/RAD/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/RAD/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/RM/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/RM/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/RM/weights"
    }
  }
}
node {
  name: "linear/linear_model/RM/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/RM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/RM/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/RM/weights"
  input: "linear/linear_model/RM/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/RM/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/RM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/TAX/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/TAX/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/TAX/weights"
    }
  }
}
node {
  name: "linear/linear_model/TAX/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/TAX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/TAX/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/TAX/weights"
  input: "linear/linear_model/TAX/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/TAX/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/TAX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/ZN/weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/ZN/weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/ZN/weights"
    }
  }
}
node {
  name: "linear/linear_model/ZN/weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/ZN/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/ZN/weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/ZN/weights"
  input: "linear/linear_model/ZN/weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/ZN/weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/ZN/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "linear/linear_model/bias_weights"
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/Assign"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights"
  input: "linear/linear_model/bias_weights/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/bias_weights/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/AGE/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/B/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/ignore_value"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/indices"
  op: "Where"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/values"
  op: "GatherNd"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/dense_shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/range"
  op: "Range"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/range/start"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/Size"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_af54f6e3-5430-498b-8536-ec0fae048678"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/hash_table"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/hash_table"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/values"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Shape/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Shape/Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Cast_1/x/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Cast_1/x"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Cast_1/x/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Cast_1"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/indices"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/to_sparse_input/dense_shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/Cast_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/hash_table_Lookup/LookupTableFindV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice"
  op: "Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice/begin"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Prod"
  op: "Prod"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2"
  op: "GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2/indices"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Cast/x"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Prod"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GreaterEqual"
  op: "GreaterEqual"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Where"
  op: "Where"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Where"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_1"
  op: "GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_2"
  op: "GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/GatherV2_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  op: "ResourceGather"
  input: "linear/linear_model/CHAS/weights"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Unique"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse"
  op: "SparseSegmentSum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/stack"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/stack/0"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Tile"
  op: "Tile"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum"
  op: "Select"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Tile"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/zeros_like"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Cast_1"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/SparseReshape:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_1"
  op: "Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Cast_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_1/begin"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Shape_1"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_2"
  op: "Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Shape_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_2/begin"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/concat"
  op: "ConcatV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Slice_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_2"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/CRIM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_3"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/DIS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_4"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/INDUS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_5"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/LSTAT/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_6"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NOX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_7"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/PTRATIO/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/ignore_value/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/ignore_value"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/ignore_value/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/NotEqual"
  op: "NotEqual"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/ignore_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/indices"
  op: "Where"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/NotEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/values"
  op: "GatherNd"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/indices"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/dense_shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 9
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000\003\000\000\000\005\000\000\000\004\000\000\000\010\000\000\000\006\000\000\000\007\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/range"
  op: "Range"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/range/start"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/Size"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/range"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/Const"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/hash_table"
  op: "HashTableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "key_dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "hash_table_417e092a-4942-4260-895f-5ee3cef21a68"
    }
  }
  attr {
    key: "use_node_name_sharing"
    value {
      b: false
    }
  }
  attr {
    key: "value_dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/table_init/LookupTableImportV2"
  op: "LookupTableImportV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/hash_table"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/Cast"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/hash_table_Lookup/LookupTableFindV2"
  op: "LookupTableFindV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/hash_table"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/values"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/Const"
  attr {
    key: "Tin"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tout"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Shape/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/dense_shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Shape/Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Cast_1/x/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Cast_1/x"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Cast_1/x/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Cast_1"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/indices"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/to_sparse_input/dense_shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/Cast_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/hash_table_Lookup/LookupTableFindV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice"
  op: "Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice/begin"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Prod"
  op: "Prod"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2/indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2"
  op: "GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2/indices"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Cast/x"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Prod"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseReshape"
  op: "SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Cast/x"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseReshape/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GreaterEqual"
  op: "GreaterEqual"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Where"
  op: "Where"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GreaterEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Where"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_1"
  op: "GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseReshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_2"
  op: "GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseReshape/Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseReshape:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseFillEmptyRows/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  op: "SparseFillEmptyRows"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/GatherV2_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseFillEmptyRows/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 2
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Cast"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Unique"
  op: "Unique"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  op: "ResourceGather"
  input: "linear/linear_model/RAD/weights"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Unique"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  op: "Identity"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse"
  op: "SparseSegmentSum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/SparseFillEmptyRows/SparseFillEmptyRows:2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/stack/0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/stack"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/stack/0"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/strided_slice"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Tile"
  op: "Tile"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/stack"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum"
  op: "Select"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Tile"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/zeros_like"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Cast_1"
  op: "Cast"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/SparseReshape:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_1/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_1/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_1"
  op: "Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Cast_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_1/begin"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Shape_1"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_2/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_2/size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_2"
  op: "Slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Shape_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_2/begin"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/concat"
  op: "ConcatV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Slice_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_2"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_8"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/RM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_9"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/TAX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/ExpandDims"
  op: "ExpandDims"
  input: "linear/linear_model/Cast_10"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice"
  op: "StridedSlice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice/stack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice/stack_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Reshape/shape"
  op: "Pack"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/strided_slice"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Reshape"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/ExpandDims"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/ZN/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_no_bias"
  op: "AddN"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  op: "BiasAdd"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_no_bias"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "linear/linear_model/Cast_11"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_12"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_13"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_14"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_15"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_16"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_17"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_18"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_19"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_20"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "linear/linear_model/Cast_21"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "ReadVariableOp"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "bias/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "bias"
      }
    }
  }
}
node {
  name: "bias"
  op: "ScalarSummary"
  input: "bias/tags"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/AGE/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/B/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/CHAS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/CRIM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/DIS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/INDUS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/LSTAT/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/NOX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/PTRATIO/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/RAD/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 9
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/RM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/TAX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_12/ReadVariableOp"
  op: "ReadVariableOp"
  input: "linear/linear_model/ZN/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "zero_fraction/total_size/Size_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "zero_fraction/total_size/AddN"
  op: "AddN"
  input: "zero_fraction/total_size/Size"
  input: "zero_fraction/total_size/Size_1"
  input: "zero_fraction/total_size/Size_2"
  input: "zero_fraction/total_size/Size_3"
  input: "zero_fraction/total_size/Size_4"
  input: "zero_fraction/total_size/Size_5"
  input: "zero_fraction/total_size/Size_6"
  input: "zero_fraction/total_size/Size_7"
  input: "zero_fraction/total_size/Size_8"
  input: "zero_fraction/total_size/Size_9"
  input: "zero_fraction/total_size/Size_10"
  input: "zero_fraction/total_size/Size_11"
  input: "zero_fraction/total_size/Size_12"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal"
  op: "Equal"
  input: "zero_fraction/total_size/Size"
  input: "zero_fraction/total_zero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count"
  op: "If"
  input: "zero_fraction/total_zero/Equal"
  input: "linear/linear_model/AGE/weights"
  input: "zero_fraction/total_size/Size"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_false_493"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_true_492"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_1"
  op: "Equal"
  input: "zero_fraction/total_size/Size_1"
  input: "zero_fraction/total_zero/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_1"
  op: "If"
  input: "zero_fraction/total_zero/Equal_1"
  input: "linear/linear_model/B/weights"
  input: "zero_fraction/total_size/Size_1"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_1_false_536"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_1_true_535"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_1/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_2"
  op: "Equal"
  input: "zero_fraction/total_size/Size_2"
  input: "zero_fraction/total_zero/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_2"
  op: "If"
  input: "zero_fraction/total_zero/Equal_2"
  input: "linear/linear_model/CHAS/weights"
  input: "zero_fraction/total_size/Size_2"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_2_false_579"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_2_true_578"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_2/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_3"
  op: "Equal"
  input: "zero_fraction/total_size/Size_3"
  input: "zero_fraction/total_zero/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_3"
  op: "If"
  input: "zero_fraction/total_zero/Equal_3"
  input: "linear/linear_model/CRIM/weights"
  input: "zero_fraction/total_size/Size_3"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_3_false_622"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_3_true_621"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_3/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_4"
  op: "Equal"
  input: "zero_fraction/total_size/Size_4"
  input: "zero_fraction/total_zero/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_4"
  op: "If"
  input: "zero_fraction/total_zero/Equal_4"
  input: "linear/linear_model/DIS/weights"
  input: "zero_fraction/total_size/Size_4"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_4_false_665"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_4_true_664"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_4/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_5"
  op: "Equal"
  input: "zero_fraction/total_size/Size_5"
  input: "zero_fraction/total_zero/Const_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_5"
  op: "If"
  input: "zero_fraction/total_zero/Equal_5"
  input: "linear/linear_model/INDUS/weights"
  input: "zero_fraction/total_size/Size_5"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_5_false_708"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_5_true_707"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_5/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_6"
  op: "Equal"
  input: "zero_fraction/total_size/Size_6"
  input: "zero_fraction/total_zero/Const_6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_6"
  op: "If"
  input: "zero_fraction/total_zero/Equal_6"
  input: "linear/linear_model/LSTAT/weights"
  input: "zero_fraction/total_size/Size_6"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_6_false_751"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_6_true_750"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_6/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_7"
  op: "Equal"
  input: "zero_fraction/total_size/Size_7"
  input: "zero_fraction/total_zero/Const_7"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_7"
  op: "If"
  input: "zero_fraction/total_zero/Equal_7"
  input: "linear/linear_model/NOX/weights"
  input: "zero_fraction/total_size/Size_7"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_7_false_794"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_7_true_793"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_7/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_8"
  op: "Equal"
  input: "zero_fraction/total_size/Size_8"
  input: "zero_fraction/total_zero/Const_8"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_8"
  op: "If"
  input: "zero_fraction/total_zero/Equal_8"
  input: "linear/linear_model/PTRATIO/weights"
  input: "zero_fraction/total_size/Size_8"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_8_false_837"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_8_true_836"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_8/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_9"
  op: "Equal"
  input: "zero_fraction/total_size/Size_9"
  input: "zero_fraction/total_zero/Const_9"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_9"
  op: "If"
  input: "zero_fraction/total_zero/Equal_9"
  input: "linear/linear_model/RAD/weights"
  input: "zero_fraction/total_size/Size_9"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_9_false_880"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_9_true_879"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_9/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_10"
  op: "Equal"
  input: "zero_fraction/total_size/Size_10"
  input: "zero_fraction/total_zero/Const_10"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_10"
  op: "If"
  input: "zero_fraction/total_zero/Equal_10"
  input: "linear/linear_model/RM/weights"
  input: "zero_fraction/total_size/Size_10"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_10_false_923"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_10_true_922"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_10/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_11"
  op: "Equal"
  input: "zero_fraction/total_size/Size_11"
  input: "zero_fraction/total_zero/Const_11"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_11"
  op: "If"
  input: "zero_fraction/total_zero/Equal_11"
  input: "linear/linear_model/TAX/weights"
  input: "zero_fraction/total_size/Size_11"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_11_false_966"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_11_true_965"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_11/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/Equal_12"
  op: "Equal"
  input: "zero_fraction/total_size/Size_12"
  input: "zero_fraction/total_zero/Const_12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_12"
  op: "If"
  input: "zero_fraction/total_zero/Equal_12"
  input: "linear/linear_model/ZN/weights"
  input: "zero_fraction/total_size/Size_12"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_12_false_1009"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "zero_fraction_total_zero_zero_count_12_true_1008"
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/zero_count_12/Identity"
  op: "Identity"
  input: "zero_fraction/total_zero/zero_count_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/total_zero/AddN"
  op: "AddN"
  input: "zero_fraction/total_zero/zero_count/Identity"
  input: "zero_fraction/total_zero/zero_count_1/Identity"
  input: "zero_fraction/total_zero/zero_count_2/Identity"
  input: "zero_fraction/total_zero/zero_count_3/Identity"
  input: "zero_fraction/total_zero/zero_count_4/Identity"
  input: "zero_fraction/total_zero/zero_count_5/Identity"
  input: "zero_fraction/total_zero/zero_count_6/Identity"
  input: "zero_fraction/total_zero/zero_count_7/Identity"
  input: "zero_fraction/total_zero/zero_count_8/Identity"
  input: "zero_fraction/total_zero/zero_count_9/Identity"
  input: "zero_fraction/total_zero/zero_count_10/Identity"
  input: "zero_fraction/total_zero/zero_count_11/Identity"
  input: "zero_fraction/total_zero/zero_count_12/Identity"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/compute/float32_size"
  op: "Cast"
  input: "zero_fraction/total_size/AddN"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/compute/truediv"
  op: "RealDiv"
  input: "zero_fraction/total_zero/AddN"
  input: "zero_fraction/compute/float32_size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "zero_fraction/zero_fraction_or_nan"
  op: "Identity"
  input: "zero_fraction/compute/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fraction_of_zero_weights/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "fraction_of_zero_weights"
      }
    }
  }
}
node {
  name: "fraction_of_zero_weights"
  op: "ScalarSummary"
  input: "fraction_of_zero_weights/tags"
  input: "zero_fraction/zero_fraction_or_nan"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:13"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/Cast"
  op: "Cast"
  input: "head/losses/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  input: "head/losses/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/mean_squared_error/Cast/x"
  op: "Const"
  input: "^head/losses/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/mean_squared_error/Mul"
  op: "Mul"
  input: "head/losses/mean_squared_error/SquaredDifference"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/mean_squared_error/Mul"
  input: "head/losses/weighted_loss/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/Fill"
  op: "Fill"
  input: "training/Ftrl/gradients/gradients/Shape"
  input: "training/Ftrl/gradients/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Ftrl/gradients/gradients/Fill"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/Fill"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/mean_squared_error/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "head/losses/mean_squared_error/Cast/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/mean_squared_error/SquaredDifference"
  input: "training/Ftrl/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Mul"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/scalar"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  input: "head/losses/Cast"
  input: "^training/Ftrl/gradients/gradients/head/losses/mean_squared_error/Mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Mul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "head/losses/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/AGE/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/B/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_2_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CRIM/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/DIS/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/INDUS/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/NOX/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_2_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RM/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/TAX/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum_grad/MatMul"
  op: "MatMul"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum_grad/MatMul_1"
  op: "MatMul"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/ZN/Reshape"
  input: "training/Ftrl/gradients/gradients/head/losses/mean_squared_error/SquaredDifference_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum_grad/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum_grad/Select"
  op: "Select"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Tile"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_2_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum_grad/Select_1"
  op: "Select"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Tile"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum_grad/zeros_like"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum_grad/zeros_like"
  op: "ZerosLike"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum_grad/Select"
  op: "Select"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Tile"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_2_grad/Reshape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum_grad/Select_1"
  op: "Select"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Tile"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum_grad/zeros_like"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/Reshape_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/Shape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  op: "GatherV2"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum_grad/Select_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Cast"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/Shape"
  op: "Shape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  op: "StridedSlice"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/Shape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  op: "GatherV2"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum_grad/Select_1"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Cast"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/GatherV2"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Unique:1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Const"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/Unique"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  op: "Size"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Size"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Const"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_1"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/strided_slice"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse_grad/UnsortedSegmentSum"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/Unique"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/decay"
    }
  }
}
node {
  name: "training/Ftrl/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/decay"
  input: "training/Ftrl/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l1_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l1_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/l1_regularization_strength"
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  input: "training/Ftrl/l1_regularization_strength/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/l1_regularization_strength/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l2_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/l2_regularization_strength"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/l2_regularization_strength"
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  input: "training/Ftrl/l2_regularization_strength/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/l2_regularization_strength/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/learning_rate"
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate"
  input: "training/Ftrl/learning_rate/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/learning_rate/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate_power"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Ftrl/learning_rate_power"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/learning_rate_power"
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate_power"
  input: "training/Ftrl/learning_rate_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/learning_rate_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/AGE/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/AGE/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/B/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/B/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/B/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/linear"
  input: "training/Ftrl/linear/linear_model/B/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/B/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CHAS/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/CRIM/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/DIS/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/DIS/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/INDUS/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/LSTAT/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/NOX/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/NOX/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/RAD/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RAD/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/RM/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/RM/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/TAX/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/TAX/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/ZN/weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/ZN/weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Initializer/Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Ftrl/linear/linear_model/bias_weights/linear"
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/Assign"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/linear/linear_model/bias_weights/linear/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity"
  op: "Identity"
  input: "training/Ftrl/Identity/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity_1"
  op: "Identity"
  input: "training/Ftrl/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity_2"
  op: "Identity"
  input: "training/Ftrl/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Identity_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Ftrl/Identity_3"
  op: "Identity"
  input: "training/Ftrl/Identity_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/AGE/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/AGE/weights"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/AGE/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/AGE/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/B/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/B/weights"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/B/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/B/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/B/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/Unique"
  op: "Unique"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/Shape"
  op: "Shape"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice"
  op: "StridedSlice"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/Shape"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice/stack"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice/stack_1"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CHAS/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/Unique:1"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/ResourceSparseApplyFtrl"
  op: "ResourceSparseApplyFtrl"
  input: "linear/linear_model/CHAS/weights"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/UnsortedSegmentSum"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/Unique"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CHAS/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/CRIM/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/CRIM/weights"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/CRIM/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/CRIM/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/DIS/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/DIS/weights"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/DIS/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/DIS/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/INDUS/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/INDUS/weights"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/INDUS/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/INDUS/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/LSTAT/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/LSTAT/weights"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/LSTAT/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/LSTAT/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/NOX/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/NOX/weights"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/NOX/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/NOX/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/PTRATIO/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/PTRATIO/weights"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/PTRATIO/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/PTRATIO/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/Unique"
  op: "Unique"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/Shape"
  op: "Shape"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/Unique"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice"
  op: "StridedSlice"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/Shape"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice/stack"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice/stack_1"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RAD/weighted_sum/embedding_lookup_sparse/embedding_lookup_grad/Reshape"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/Unique:1"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/ResourceSparseApplyFtrl"
  op: "ResourceSparseApplyFtrl"
  input: "linear/linear_model/RAD/weights"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/UnsortedSegmentSum"
  input: "training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/Unique"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RAD/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/RM/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/RM/weights"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/RM/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/RM/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/TAX/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/TAX/weights"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/TAX/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/TAX/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/ZN/weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/ZN/weights"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/ZN/weighted_sum_grad/MatMul_1"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/ZN/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/ResourceApplyFtrl"
  op: "ResourceApplyFtrl"
  input: "linear/linear_model/bias_weights"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  input: "training/Ftrl/gradients/gradients/linear/linear_model/linear/linear_model/linear/linear_model/weighted_sum_grad/BiasAddGrad"
  input: "training/Ftrl/Identity"
  input: "training/Ftrl/Identity_2"
  input: "training/Ftrl/Identity_3"
  input: "training/Ftrl/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@linear/linear_model/bias_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/Const"
  op: "Const"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/AGE/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/B/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/ResourceSparseApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/CRIM/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/DIS/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/INDUS/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/LSTAT/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/NOX/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/PTRATIO/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/ResourceSparseApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/RM/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/TAX/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/ZN/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/ResourceApplyFtrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Ftrl/Ftrl/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Ftrl/Ftrl/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  input: "^training/Ftrl/Ftrl/AssignAddVariableOp"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/AGE/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/B/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/CHAS/weights/ResourceSparseApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/CRIM/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/DIS/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/INDUS/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/LSTAT/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/NOX/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/PTRATIO/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/RAD/weights/ResourceSparseApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/RM/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/TAX/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/ZN/weights/ResourceApplyFtrl"
  input: "^training/Ftrl/Ftrl/update_linear/linear_model/bias_weights/ResourceApplyFtrl"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^linear/linear_model/AGE/weights/Assign"
  input: "^linear/linear_model/B/weights/Assign"
  input: "^linear/linear_model/CHAS/weights/Assign"
  input: "^linear/linear_model/CRIM/weights/Assign"
  input: "^linear/linear_model/DIS/weights/Assign"
  input: "^linear/linear_model/INDUS/weights/Assign"
  input: "^linear/linear_model/LSTAT/weights/Assign"
  input: "^linear/linear_model/NOX/weights/Assign"
  input: "^linear/linear_model/PTRATIO/weights/Assign"
  input: "^linear/linear_model/RAD/weights/Assign"
  input: "^linear/linear_model/RM/weights/Assign"
  input: "^linear/linear_model/TAX/weights/Assign"
  input: "^linear/linear_model/ZN/weights/Assign"
  input: "^linear/linear_model/bias_weights/Assign"
  input: "^training/Ftrl/decay/Assign"
  input: "^training/Ftrl/l1_regularization_strength/Assign"
  input: "^training/Ftrl/l2_regularization_strength/Assign"
  input: "^training/Ftrl/learning_rate/Assign"
  input: "^training/Ftrl/learning_rate_power/Assign"
  input: "^training/Ftrl/linear/linear_model/AGE/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/AGE/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/B/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/B/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/CHAS/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/CHAS/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/CRIM/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/CRIM/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/DIS/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/DIS/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/INDUS/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/INDUS/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/LSTAT/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/LSTAT/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/NOX/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/NOX/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/PTRATIO/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/RAD/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/RAD/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/RM/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/RM/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/TAX/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/TAX/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/ZN/weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/ZN/weights/linear/Assign"
  input: "^training/Ftrl/linear/linear_model/bias_weights/accumulator/Assign"
  input: "^training/Ftrl/linear/linear_model/bias_weights/linear/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/AGE/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/B/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/CHAS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/CRIM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/DIS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/INDUS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/LSTAT/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NOX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/PTRATIO/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/RAD/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/RM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/TAX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/ZN/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/B/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  input: "report_uninitialized_variables/VarIsInitializedOp_22"
  input: "report_uninitialized_variables/VarIsInitializedOp_23"
  input: "report_uninitialized_variables/VarIsInitializedOp_24"
  input: "report_uninitialized_variables/VarIsInitializedOp_25"
  input: "report_uninitialized_variables/VarIsInitializedOp_26"
  input: "report_uninitialized_variables/VarIsInitializedOp_27"
  input: "report_uninitialized_variables/VarIsInitializedOp_28"
  input: "report_uninitialized_variables/VarIsInitializedOp_29"
  input: "report_uninitialized_variables/VarIsInitializedOp_30"
  input: "report_uninitialized_variables/VarIsInitializedOp_31"
  input: "report_uninitialized_variables/VarIsInitializedOp_32"
  input: "report_uninitialized_variables/VarIsInitializedOp_33"
  input: "report_uninitialized_variables/VarIsInitializedOp_34"
  input: "report_uninitialized_variables/VarIsInitializedOp_35"
  input: "report_uninitialized_variables/VarIsInitializedOp_36"
  input: "report_uninitialized_variables/VarIsInitializedOp_37"
  input: "report_uninitialized_variables/VarIsInitializedOp_38"
  input: "report_uninitialized_variables/VarIsInitializedOp_39"
  input: "report_uninitialized_variables/VarIsInitializedOp_40"
  input: "report_uninitialized_variables/VarIsInitializedOp_41"
  input: "report_uninitialized_variables/VarIsInitializedOp_42"
  input: "report_uninitialized_variables/VarIsInitializedOp_43"
  input: "report_uninitialized_variables/VarIsInitializedOp_44"
  input: "report_uninitialized_variables/VarIsInitializedOp_45"
  input: "report_uninitialized_variables/VarIsInitializedOp_46"
  input: "report_uninitialized_variables/VarIsInitializedOp_47"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 48
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/AGE/weights"
        string_val: "linear/linear_model/B/weights"
        string_val: "linear/linear_model/CHAS/weights"
        string_val: "linear/linear_model/CRIM/weights"
        string_val: "linear/linear_model/DIS/weights"
        string_val: "linear/linear_model/INDUS/weights"
        string_val: "linear/linear_model/LSTAT/weights"
        string_val: "linear/linear_model/NOX/weights"
        string_val: "linear/linear_model/PTRATIO/weights"
        string_val: "linear/linear_model/RAD/weights"
        string_val: "linear/linear_model/RM/weights"
        string_val: "linear/linear_model/TAX/weights"
        string_val: "linear/linear_model/ZN/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/B/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/B/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/AGE/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/B/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/CHAS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/CRIM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/DIS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/INDUS/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/LSTAT/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/NOX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/PTRATIO/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/RAD/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/RM/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/TAX/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/ZN/weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "linear/linear_model/bias_weights"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l1_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/l2_regularization_strength"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/learning_rate_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/B/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_43"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_44"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_45"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_46"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_47"
  op: "VarIsInitializedOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_22"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_23"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_24"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_25"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_26"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_27"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_28"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_29"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_30"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_31"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_32"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_33"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_34"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_35"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_36"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_37"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_38"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_39"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_40"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_41"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_42"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_43"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_44"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_45"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_46"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_47"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 48
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/AGE/weights"
        string_val: "linear/linear_model/B/weights"
        string_val: "linear/linear_model/CHAS/weights"
        string_val: "linear/linear_model/CRIM/weights"
        string_val: "linear/linear_model/DIS/weights"
        string_val: "linear/linear_model/INDUS/weights"
        string_val: "linear/linear_model/LSTAT/weights"
        string_val: "linear/linear_model/NOX/weights"
        string_val: "linear/linear_model/PTRATIO/weights"
        string_val: "linear/linear_model/RAD/weights"
        string_val: "linear/linear_model/RM/weights"
        string_val: "linear/linear_model/TAX/weights"
        string_val: "linear/linear_model/ZN/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/B/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/B/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 48
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
  input: "^linear/linear_model/linear/linear_model/linear/linear_model/CHAS/CHAS_lookup/hash_table/table_init/LookupTableImportV2"
  input: "^linear/linear_model/linear/linear_model/linear/linear_model/RAD/RAD_lookup/hash_table/table_init/LookupTableImportV2"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "bias"
  input: "fraction_of_zero_weights"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_21024adc4d5540f189638cae0e065321/part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/AGE/weights"
        string_val: "linear/linear_model/B/weights"
        string_val: "linear/linear_model/CHAS/weights"
        string_val: "linear/linear_model/CRIM/weights"
        string_val: "linear/linear_model/DIS/weights"
        string_val: "linear/linear_model/INDUS/weights"
        string_val: "linear/linear_model/LSTAT/weights"
        string_val: "linear/linear_model/NOX/weights"
        string_val: "linear/linear_model/PTRATIO/weights"
        string_val: "linear/linear_model/RAD/weights"
        string_val: "linear/linear_model/RM/weights"
        string_val: "linear/linear_model/TAX/weights"
        string_val: "linear/linear_model/ZN/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/B/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/B/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step/Read/ReadVariableOp"
  input: "linear/linear_model/AGE/weights/Read/ReadVariableOp"
  input: "linear/linear_model/B/weights/Read/ReadVariableOp"
  input: "linear/linear_model/CHAS/weights/Read/ReadVariableOp"
  input: "linear/linear_model/CRIM/weights/Read/ReadVariableOp"
  input: "linear/linear_model/DIS/weights/Read/ReadVariableOp"
  input: "linear/linear_model/INDUS/weights/Read/ReadVariableOp"
  input: "linear/linear_model/LSTAT/weights/Read/ReadVariableOp"
  input: "linear/linear_model/NOX/weights/Read/ReadVariableOp"
  input: "linear/linear_model/PTRATIO/weights/Read/ReadVariableOp"
  input: "linear/linear_model/RAD/weights/Read/ReadVariableOp"
  input: "linear/linear_model/RM/weights/Read/ReadVariableOp"
  input: "linear/linear_model/TAX/weights/Read/ReadVariableOp"
  input: "linear/linear_model/ZN/weights/Read/ReadVariableOp"
  input: "linear/linear_model/bias_weights/Read/ReadVariableOp"
  input: "training/Ftrl/decay/Read/ReadVariableOp"
  input: "training/Ftrl/l1_regularization_strength/Read/ReadVariableOp"
  input: "training/Ftrl/l2_regularization_strength/Read/ReadVariableOp"
  input: "training/Ftrl/learning_rate/Read/ReadVariableOp"
  input: "training/Ftrl/learning_rate_power/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator/Read/ReadVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: "global_step"
        string_val: "linear/linear_model/AGE/weights"
        string_val: "linear/linear_model/B/weights"
        string_val: "linear/linear_model/CHAS/weights"
        string_val: "linear/linear_model/CRIM/weights"
        string_val: "linear/linear_model/DIS/weights"
        string_val: "linear/linear_model/INDUS/weights"
        string_val: "linear/linear_model/LSTAT/weights"
        string_val: "linear/linear_model/NOX/weights"
        string_val: "linear/linear_model/PTRATIO/weights"
        string_val: "linear/linear_model/RAD/weights"
        string_val: "linear/linear_model/RM/weights"
        string_val: "linear/linear_model/TAX/weights"
        string_val: "linear/linear_model/ZN/weights"
        string_val: "linear/linear_model/bias_weights"
        string_val: "training/Ftrl/decay"
        string_val: "training/Ftrl/l1_regularization_strength"
        string_val: "training/Ftrl/l2_regularization_strength"
        string_val: "training/Ftrl/learning_rate"
        string_val: "training/Ftrl/learning_rate_power"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/AGE/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/B/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/B/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/DIS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/NOX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RAD/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/RM/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/TAX/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/ZN/weights/linear"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
        string_val: "training/Ftrl/linear/linear_model/bias_weights/linear"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 48
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 48
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "linear/linear_model/AGE/weights"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "linear/linear_model/B/weights"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "linear/linear_model/CHAS/weights"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "linear/linear_model/CRIM/weights"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "linear/linear_model/DIS/weights"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "linear/linear_model/INDUS/weights"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "linear/linear_model/LSTAT/weights"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "linear/linear_model/NOX/weights"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "linear/linear_model/PTRATIO/weights"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "linear/linear_model/RAD/weights"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "linear/linear_model/RM/weights"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "linear/linear_model/TAX/weights"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "linear/linear_model/ZN/weights"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "linear/linear_model/bias_weights"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Ftrl/decay"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Ftrl/l1_regularization_strength"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Ftrl/l2_regularization_strength"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Ftrl/learning_rate_power"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/accumulator"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/AGE/weights/linear"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_22"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/accumulator"
  input: "save/Identity_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_23"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/B/weights/linear"
  input: "save/Identity_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_24"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/accumulator"
  input: "save/Identity_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_25"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CHAS/weights/linear"
  input: "save/Identity_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_26"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/accumulator"
  input: "save/Identity_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_27"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/CRIM/weights/linear"
  input: "save/Identity_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_28"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/accumulator"
  input: "save/Identity_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_29"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/DIS/weights/linear"
  input: "save/Identity_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_30"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/accumulator"
  input: "save/Identity_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_31"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/INDUS/weights/linear"
  input: "save/Identity_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_32"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/accumulator"
  input: "save/Identity_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_33"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/LSTAT/weights/linear"
  input: "save/Identity_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_34"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/accumulator"
  input: "save/Identity_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_35"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/NOX/weights/linear"
  input: "save/Identity_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_36"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/accumulator"
  input: "save/Identity_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_37"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/PTRATIO/weights/linear"
  input: "save/Identity_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_38"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/accumulator"
  input: "save/Identity_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_39"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RAD/weights/linear"
  input: "save/Identity_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_40"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/accumulator"
  input: "save/Identity_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_41"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/RM/weights/linear"
  input: "save/Identity_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_42"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/accumulator"
  input: "save/Identity_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_43"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/TAX/weights/linear"
  input: "save/Identity_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_44"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/accumulator"
  input: "save/Identity_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_45"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/ZN/weights/linear"
  input: "save/Identity_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_46"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/accumulator"
  input: "save/Identity_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_47"
  op: "AssignVariableOp"
  input: "training/Ftrl/linear/linear_model/bias_weights/linear"
  input: "save/Identity_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_22"
  input: "^save/AssignVariableOp_23"
  input: "^save/AssignVariableOp_24"
  input: "^save/AssignVariableOp_25"
  input: "^save/AssignVariableOp_26"
  input: "^save/AssignVariableOp_27"
  input: "^save/AssignVariableOp_28"
  input: "^save/AssignVariableOp_29"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_30"
  input: "^save/AssignVariableOp_31"
  input: "^save/AssignVariableOp_32"
  input: "^save/AssignVariableOp_33"
  input: "^save/AssignVariableOp_34"
  input: "^save/AssignVariableOp_35"
  input: "^save/AssignVariableOp_36"
  input: "^save/AssignVariableOp_37"
  input: "^save/AssignVariableOp_38"
  input: "^save/AssignVariableOp_39"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_40"
  input: "^save/AssignVariableOp_41"
  input: "^save/AssignVariableOp_42"
  input: "^save/AssignVariableOp_43"
  input: "^save/AssignVariableOp_44"
  input: "^save/AssignVariableOp_45"
  input: "^save/AssignVariableOp_46"
  input: "^save/AssignVariableOp_47"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_11_true_965"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_933"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_7"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_10_true_922"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_846"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_4_true_664"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_3_false_622"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_crim_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_3"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_crim_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_632"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_631"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_3"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_true_492"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_889"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 9
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_502"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_12_false_1009"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_zn_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_12"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_zn_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_1019"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_1018"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_12"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_7_false_794"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_nox_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_7"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_nox_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_804"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_803"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_7"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_847"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_631"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_804"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_8_true_836"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_9_true_879"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_4_false_665"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_dis_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_4"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_dis_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_675"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_674"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_4"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_2_false_579"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_chas_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_2"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_chas_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_589"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_588"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_2"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_12_true_1008"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_6_true_750"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_1_false_536"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_b_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_1"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_b_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_546"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_545"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_1_true_535"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_6"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_761"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_11_false_966"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_tax_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_11"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_tax_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_976"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_975"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_11"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_975"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_9_false_880"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_rad_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_9"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_rad_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 9
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_890"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_889"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_9"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_7_true_793"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_3_true_621"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_545"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_632"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_675"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_10_false_923"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_rm_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_10"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_rm_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_933"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_932"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_10"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_5_false_708"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_indus_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_5"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_indus_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_718"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_717"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_5"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_717"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_5_true_707"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_546"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_1019"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_932"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_760"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_false_493"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_age_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_age_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_503"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_502"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_674"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_1018"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_976"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_503"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_8_false_837"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_ptratio_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_8"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_ptratio_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_847"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_846"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_8"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_2_true_578"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "const"
        type: DT_FLOAT
      }
    }
    node_def {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Const"
      }
    }
    ret {
      key: "const"
      value: "Const:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_588"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_589"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 2
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 2
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_total_zero_zero_count_6_false_751"
      input_arg {
        name: "zero_fraction_readvariableop_linear_linear_model_lstat_weights"
        type: DT_RESOURCE
      }
      input_arg {
        name: "cast_zero_fraction_total_size_size_6"
        type: DT_INT64
      }
      output_arg {
        name: "mul"
        type: DT_FLOAT
      }
      is_stateful: true
    }
    node_def {
      name: "zero_fraction/ReadVariableOp"
      op: "ReadVariableOp"
      input: "zero_fraction_readvariableop_linear_linear_model_lstat_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/ReadVariableOp"
      }
    }
    node_def {
      name: "zero_fraction/Size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/Size"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2147483647
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual/y"
      }
    }
    node_def {
      name: "zero_fraction/LessEqual"
      op: "LessEqual"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/LessEqual"
      }
    }
    node_def {
      name: "zero_fraction/cond"
      op: "StatelessIf"
      input: "zero_fraction/LessEqual:z:0"
      input: "zero_fraction/ReadVariableOp:value:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "zero_fraction_cond_false_761"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "zero_fraction_cond_true_760"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond"
      }
    }
    node_def {
      name: "zero_fraction/cond/Identity"
      op: "Identity"
      input: "zero_fraction/cond:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/cond/Identity"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/sub"
      op: "Sub"
      input: "zero_fraction/Size:output:0"
      input: "zero_fraction/cond/Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/sub"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast"
      op: "Cast"
      input: "zero_fraction/counts_to_fraction/sub:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/Cast_1"
      op: "Cast"
      input: "zero_fraction/Size:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/Cast_1"
      }
    }
    node_def {
      name: "zero_fraction/counts_to_fraction/truediv"
      op: "RealDiv"
      input: "zero_fraction/counts_to_fraction/Cast:y:0"
      input: "zero_fraction/counts_to_fraction/Cast_1:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/counts_to_fraction/truediv"
      }
    }
    node_def {
      name: "zero_fraction/fraction"
      op: "Identity"
      input: "zero_fraction/counts_to_fraction/truediv:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "zero_fraction/fraction"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "cast_zero_fraction_total_size_size_6"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "mul_0"
      op: "Mul"
      input: "zero_fraction/fraction:output:0"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      experimental_debug_info {
        original_node_names: "mul"
      }
    }
    ret {
      key: "mul"
      value: "mul_0:z:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_718"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_false_890"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 9
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "zero_fraction_cond_true_803"
      input_arg {
        name: "count_nonzero_notequal_zero_fraction_readvariableop"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_zero_fraction_readvariableop"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
